
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004824  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080049c4  080049c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c4  080049c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080049cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000074  08004a40  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004a40  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012996  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029fe  00000000  00000000  00032a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001118  00000000  00000000  00035438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00036550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000190c3  00000000  00000000  00037538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb1b  00000000  00000000  000505fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d58e  00000000  00000000  0005f116  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec6a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047cc  00000000  00000000  000ec720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004918 	.word	0x08004918

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004918 	.word	0x08004918

0800014c <delay>:

#include "stm32f1xx_hal.h"
#include "DHT11.h"
#include <stdlib.h>

void delay(uint16_t inputDelay) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < inputDelay);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay+0x14>
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	200000b4 	.word	0x200000b4

0800017c <setPinOutput>:

void setPinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000196:	887b      	ldrh	r3, [r7, #2]
 8000198:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019a:	2301      	movs	r3, #1
 800019c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019e:	2302      	movs	r3, #2
 80001a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	4619      	mov	r1, r3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f002 f981 	bl	80024b0 <HAL_GPIO_Init>
}
 80001ae:	bf00      	nop
 80001b0:	3718      	adds	r7, #24
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <setPinInput>:

void setPinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
 80001be:	460b      	mov	r3, r1
 80001c0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001d8:	2301      	movs	r3, #1
 80001da:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	4619      	mov	r1, r3
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f002 f964 	bl	80024b0 <HAL_GPIO_Init>
}
 80001e8:	bf00      	nop
 80001ea:	3718      	adds	r7, #24
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <startDHT11>:

uint8_t startDHT11(uint8_t Timeout) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 80001fa:	f001 ffa9 	bl	8002150 <HAL_GetTick>
 80001fe:	60b8      	str	r0, [r7, #8]

	uint8_t reponse = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]
	setPinOutput(GPIOA, GPIO_PIN_1);
 8000204:	2102      	movs	r1, #2
 8000206:	4824      	ldr	r0, [pc, #144]	; (8000298 <startDHT11+0xa8>)
 8000208:	f7ff ffb8 	bl	800017c <setPinOutput>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	2102      	movs	r1, #2
 8000210:	4821      	ldr	r0, [pc, #132]	; (8000298 <startDHT11+0xa8>)
 8000212:	f002 fabe 	bl	8002792 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8000216:	2012      	movs	r0, #18
 8000218:	f001 ffa4 	bl	8002164 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	481d      	ldr	r0, [pc, #116]	; (8000298 <startDHT11+0xa8>)
 8000222:	f002 fab6 	bl	8002792 <HAL_GPIO_WritePin>
	delay(30);
 8000226:	201e      	movs	r0, #30
 8000228:	f7ff ff90 	bl	800014c <delay>
	setPinInput(GPIOA, GPIO_PIN_1);
 800022c:	2102      	movs	r1, #2
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <startDHT11+0xa8>)
 8000230:	f7ff ffc1 	bl	80001b6 <setPinInput>
	//while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1));
	delay(40);
 8000234:	2028      	movs	r0, #40	; 0x28
 8000236:	f7ff ff89 	bl	800014c <delay>
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 800023a:	2102      	movs	r1, #2
 800023c:	4816      	ldr	r0, [pc, #88]	; (8000298 <startDHT11+0xa8>)
 800023e:	f002 fa91 	bl	8002764 <HAL_GPIO_ReadPin>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11a      	bne.n	800027e <startDHT11+0x8e>
		delay(80);
 8000248:	2050      	movs	r0, #80	; 0x50
 800024a:	f7ff ff7f 	bl	800014c <delay>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 800024e:	2102      	movs	r1, #2
 8000250:	4811      	ldr	r0, [pc, #68]	; (8000298 <startDHT11+0xa8>)
 8000252:	f002 fa87 	bl	8002764 <HAL_GPIO_ReadPin>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d010      	beq.n	800027e <startDHT11+0x8e>
			reponse = 1;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
		}
	}
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 8000260:	e00d      	b.n	800027e <startDHT11+0x8e>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return 0;
 8000262:	f001 ff75 	bl	8002150 <HAL_GetTick>
 8000266:	4602      	mov	r2, r0
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000270:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	429a      	cmp	r2, r3
 8000278:	dd01      	ble.n	800027e <startDHT11+0x8e>
 800027a:	2300      	movs	r3, #0
 800027c:	e007      	b.n	800028e <startDHT11+0x9e>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 800027e:	2102      	movs	r1, #2
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <startDHT11+0xa8>)
 8000282:	f002 fa6f 	bl	8002764 <HAL_GPIO_ReadPin>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d1ea      	bne.n	8000262 <startDHT11+0x72>
	}
	return reponse;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40010800 	.word	0x40010800

0800029c <readDHT11>:

uint8_t readDHT11(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
	uint8_t i,ans = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i++) {
 80002a6:	2300      	movs	r3, #0
 80002a8:	71fb      	strb	r3, [r7, #7]
 80002aa:	e021      	b.n	80002f0 <readDHT11+0x54>
		ans = ans << 1;
 80002ac:	79bb      	ldrb	r3, [r7, #6]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
		while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))); //wait until the pin high
 80002b2:	bf00      	nop
 80002b4:	2102      	movs	r1, #2
 80002b6:	4812      	ldr	r0, [pc, #72]	; (8000300 <readDHT11+0x64>)
 80002b8:	f002 fa54 	bl	8002764 <HAL_GPIO_ReadPin>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f8      	beq.n	80002b4 <readDHT11+0x18>
		delay(40);
 80002c2:	2028      	movs	r0, #40	; 0x28
 80002c4:	f7ff ff42 	bl	800014c <delay>
		ans = ans | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80002c8:	2102      	movs	r1, #2
 80002ca:	480d      	ldr	r0, [pc, #52]	; (8000300 <readDHT11+0x64>)
 80002cc:	f002 fa4a 	bl	8002764 <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	79bb      	ldrb	r3, [r7, #6]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	71bb      	strb	r3, [r7, #6]
		while (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1));  // wait for the pin to go low
 80002da:	bf00      	nop
 80002dc:	2102      	movs	r1, #2
 80002de:	4808      	ldr	r0, [pc, #32]	; (8000300 <readDHT11+0x64>)
 80002e0:	f002 fa40 	bl	8002764 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1f8      	bne.n	80002dc <readDHT11+0x40>
	for (i = 0; i < 8; i++) {
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	3301      	adds	r3, #1
 80002ee:	71fb      	strb	r3, [r7, #7]
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	2b07      	cmp	r3, #7
 80002f4:	d9da      	bls.n	80002ac <readDHT11+0x10>
	}
	return ans;
 80002f6:	79bb      	ldrb	r3, [r7, #6]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40010800 	.word	0x40010800

08000304 <getDHT11Data>:

HAL_StatusTypeDef getDHT11Data(DHT11_data *data, uint16_t Timeout) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	807b      	strh	r3, [r7, #2]
	uint8_t sum;
	uint8_t humidity[2] = {0,0};
 8000310:	2300      	movs	r3, #0
 8000312:	733b      	strb	r3, [r7, #12]
 8000314:	2300      	movs	r3, #0
 8000316:	737b      	strb	r3, [r7, #13]
	uint8_t temperature[2] = {0,0};
 8000318:	2300      	movs	r3, #0
 800031a:	723b      	strb	r3, [r7, #8]
 800031c:	2300      	movs	r3, #0
 800031e:	727b      	strb	r3, [r7, #9]

	if (startDHT11(Timeout)) {
 8000320:	887b      	ldrh	r3, [r7, #2]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff63 	bl	80001f0 <startDHT11>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d02c      	beq.n	800038a <getDHT11Data+0x86>
		humidity[0] = readDHT11();
 8000330:	f7ff ffb4 	bl	800029c <readDHT11>
 8000334:	4603      	mov	r3, r0
 8000336:	733b      	strb	r3, [r7, #12]
		humidity[1] = readDHT11();
 8000338:	f7ff ffb0 	bl	800029c <readDHT11>
 800033c:	4603      	mov	r3, r0
 800033e:	737b      	strb	r3, [r7, #13]
		temperature[0] = readDHT11();
 8000340:	f7ff ffac 	bl	800029c <readDHT11>
 8000344:	4603      	mov	r3, r0
 8000346:	723b      	strb	r3, [r7, #8]
		temperature[1] = readDHT11();
 8000348:	f7ff ffa8 	bl	800029c <readDHT11>
 800034c:	4603      	mov	r3, r0
 800034e:	727b      	strb	r3, [r7, #9]
		sum = readDHT11();
 8000350:	f7ff ffa4 	bl	800029c <readDHT11>
 8000354:	4603      	mov	r3, r0
 8000356:	73fb      	strb	r3, [r7, #15]
		if (sum == humidity[0]+humidity[1]+temperature[0]+temperature[1]) {
 8000358:	7bfa      	ldrb	r2, [r7, #15]
 800035a:	7b3b      	ldrb	r3, [r7, #12]
 800035c:	4619      	mov	r1, r3
 800035e:	7b7b      	ldrb	r3, [r7, #13]
 8000360:	440b      	add	r3, r1
 8000362:	7a39      	ldrb	r1, [r7, #8]
 8000364:	440b      	add	r3, r1
 8000366:	7a79      	ldrb	r1, [r7, #9]
 8000368:	440b      	add	r3, r1
 800036a:	429a      	cmp	r2, r3
 800036c:	d10f      	bne.n	800038e <getDHT11Data+0x8a>
			data->humidity[0] = humidity[0];
 800036e:	7b3a      	ldrb	r2, [r7, #12]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	701a      	strb	r2, [r3, #0]
			data->humidity[1] = humidity[1];
 8000374:	7b7a      	ldrb	r2, [r7, #13]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	705a      	strb	r2, [r3, #1]
			data->temperature[0] = temperature[0];
 800037a:	7a3a      	ldrb	r2, [r7, #8]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	709a      	strb	r2, [r3, #2]
			data->temperature[1] = temperature[1];
 8000380:	7a7a      	ldrb	r2, [r7, #9]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	70da      	strb	r2, [r3, #3]
			return HAL_OK;
 8000386:	2300      	movs	r3, #0
 8000388:	e001      	b.n	800038e <getDHT11Data+0x8a>
		}
	} else {
		return HAL_TIMEOUT;
 800038a:	2303      	movs	r3, #3
 800038c:	e7ff      	b.n	800038e <getDHT11Data+0x8a>
	}
}
 800038e:	4618      	mov	r0, r3
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <readIncreaseButton>:
Button_Status increaseButtonStatus = 0, decreaseButtonStatus = 0, modeButtonStatus = 0, decideButtonStatus = 0;
Button_Status isIncBtnPressed = 0, isDecBtnPressed = 0, isModeBtnPressed = 0, isDecideBtnPressed = 0;

uint16_t timeInc = 0, timeDec = 0;

void readIncreaseButton(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	firstReadInc = secondReadInc;
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <readIncreaseButton+0x78>)
 800039e:	781a      	ldrb	r2, [r3, #0]
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <readIncreaseButton+0x7c>)
 80003a2:	701a      	strb	r2, [r3, #0]
	secondReadInc = !HAL_GPIO_ReadPin(IncBtn_Port, IncBtn_Pin);
 80003a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a8:	481b      	ldr	r0, [pc, #108]	; (8000418 <readIncreaseButton+0x80>)
 80003aa:	f002 f9db 	bl	8002764 <HAL_GPIO_ReadPin>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	bf0c      	ite	eq
 80003b4:	2301      	moveq	r3, #1
 80003b6:	2300      	movne	r3, #0
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <readIncreaseButton+0x78>)
 80003be:	701a      	strb	r2, [r3, #0]
	if (firstReadInc == secondReadInc) {
 80003c0:	4b14      	ldr	r3, [pc, #80]	; (8000414 <readIncreaseButton+0x7c>)
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <readIncreaseButton+0x78>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d11e      	bne.n	800040a <readIncreaseButton+0x72>
		if (firstReadInc) {
 80003cc:	4b11      	ldr	r3, [pc, #68]	; (8000414 <readIncreaseButton+0x7c>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d014      	beq.n	80003fe <readIncreaseButton+0x66>
			timeInc++;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <readIncreaseButton+0x84>)
 80003d6:	881b      	ldrh	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <readIncreaseButton+0x84>)
 80003de:	801a      	strh	r2, [r3, #0]
			if (timeInc >= (BUTTON_THRESHOLD + BUTTON_PERIOD)) {
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <readIncreaseButton+0x84>)
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	2b95      	cmp	r3, #149	; 0x95
 80003e6:	d906      	bls.n	80003f6 <readIncreaseButton+0x5e>
				timeInc = BUTTON_THRESHOLD;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <readIncreaseButton+0x84>)
 80003ea:	2264      	movs	r2, #100	; 0x64
 80003ec:	801a      	strh	r2, [r3, #0]
				isIncBtnPressed = Button_Pressed_Increase;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <readIncreaseButton+0x88>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	701a      	strb	r2, [r3, #0]
		} else {
			timeInc = 0;
			isIncBtnPressed = Button_Not_Pressed;
		}
	}
}
 80003f4:	e009      	b.n	800040a <readIncreaseButton+0x72>
				isIncBtnPressed = Button_Pressed;
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <readIncreaseButton+0x88>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
}
 80003fc:	e005      	b.n	800040a <readIncreaseButton+0x72>
			timeInc = 0;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <readIncreaseButton+0x84>)
 8000400:	2200      	movs	r2, #0
 8000402:	801a      	strh	r2, [r3, #0]
			isIncBtnPressed = Button_Not_Pressed;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <readIncreaseButton+0x88>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000ff 	.word	0x200000ff
 8000414:	200000fd 	.word	0x200000fd
 8000418:	40011000 	.word	0x40011000
 800041c:	20000098 	.word	0x20000098
 8000420:	20000094 	.word	0x20000094

08000424 <buttonIncreaseValue>:

uint8_t buttonIncreaseValue(uint8_t inputValue, void(* function)(uint8_t), uint8_t threshold) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	71fb      	strb	r3, [r7, #7]
 8000430:	4613      	mov	r3, r2
 8000432:	71bb      	strb	r3, [r7, #6]
	switch(increaseButtonStatus) {
 8000434:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <buttonIncreaseValue+0x94>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d01b      	beq.n	8000474 <buttonIncreaseValue+0x50>
 800043c:	2b02      	cmp	r3, #2
 800043e:	d01e      	beq.n	800047e <buttonIncreaseValue+0x5a>
 8000440:	2b00      	cmp	r3, #0
 8000442:	d133      	bne.n	80004ac <buttonIncreaseValue+0x88>
	case Button_Not_Pressed:
		if (isIncBtnPressed == Button_Pressed) {
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <buttonIncreaseValue+0x98>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d10e      	bne.n	800046a <buttonIncreaseValue+0x46>
			inputValue += BUTTON_STEP;
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	3301      	adds	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
			inputValue %= threshold;
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	fbb3 f1f2 	udiv	r1, r3, r2
 800045a:	fb02 f201 	mul.w	r2, r2, r1
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	71fb      	strb	r3, [r7, #7]
			(* function)(inputValue);
 8000462:	79fa      	ldrb	r2, [r7, #7]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	4610      	mov	r0, r2
 8000468:	4798      	blx	r3
		}
		increaseButtonStatus = isIncBtnPressed;
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <buttonIncreaseValue+0x98>)
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <buttonIncreaseValue+0x94>)
 8000470:	701a      	strb	r2, [r3, #0]
		break;
 8000472:	e01b      	b.n	80004ac <buttonIncreaseValue+0x88>
	case Button_Pressed:
		increaseButtonStatus = isIncBtnPressed;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <buttonIncreaseValue+0x98>)
 8000476:	781a      	ldrb	r2, [r3, #0]
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <buttonIncreaseValue+0x94>)
 800047a:	701a      	strb	r2, [r3, #0]
		break;
 800047c:	e016      	b.n	80004ac <buttonIncreaseValue+0x88>
	case Button_Pressed_Increase:
		inputValue += BUTTON_STEP;
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	3301      	adds	r3, #1
 8000482:	71fb      	strb	r3, [r7, #7]
		inputValue %= threshold;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	79ba      	ldrb	r2, [r7, #6]
 8000488:	fbb3 f1f2 	udiv	r1, r3, r2
 800048c:	fb02 f201 	mul.w	r2, r2, r1
 8000490:	1a9b      	subs	r3, r3, r2
 8000492:	71fb      	strb	r3, [r7, #7]
		(* function)(inputValue);
 8000494:	79fa      	ldrb	r2, [r7, #7]
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	4610      	mov	r0, r2
 800049a:	4798      	blx	r3
		increaseButtonStatus = isIncBtnPressed = Button_Pressed;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <buttonIncreaseValue+0x98>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <buttonIncreaseValue+0x98>)
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <buttonIncreaseValue+0x94>)
 80004a8:	701a      	strb	r2, [r3, #0]
		break;
 80004aa:	bf00      	nop
	}
	return inputValue;
 80004ac:	79fb      	ldrb	r3, [r7, #7]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000090 	.word	0x20000090
 80004bc:	20000094 	.word	0x20000094

080004c0 <readDecreaseButton>:

void readDecreaseButton(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	firstReadDec = secondReadDec;
 80004c4:	4b20      	ldr	r3, [pc, #128]	; (8000548 <readDecreaseButton+0x88>)
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b20      	ldr	r3, [pc, #128]	; (800054c <readDecreaseButton+0x8c>)
 80004ca:	701a      	strb	r2, [r3, #0]
	secondReadDec = !HAL_GPIO_ReadPin(DecBtn_Port, DecBtn_Pin) && HAL_GPIO_ReadPin(IncBtn_Port, IncBtn_Pin);
 80004cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d0:	481f      	ldr	r0, [pc, #124]	; (8000550 <readDecreaseButton+0x90>)
 80004d2:	f002 f947 	bl	8002764 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d109      	bne.n	80004f0 <readDecreaseButton+0x30>
 80004dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e0:	481b      	ldr	r0, [pc, #108]	; (8000550 <readDecreaseButton+0x90>)
 80004e2:	f002 f93f 	bl	8002764 <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <readDecreaseButton+0x30>
 80004ec:	2301      	movs	r3, #1
 80004ee:	e000      	b.n	80004f2 <readDecreaseButton+0x32>
 80004f0:	2300      	movs	r3, #0
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <readDecreaseButton+0x88>)
 80004f6:	701a      	strb	r2, [r3, #0]
	if (firstReadDec == secondReadDec) {
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <readDecreaseButton+0x8c>)
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <readDecreaseButton+0x88>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	429a      	cmp	r2, r3
 8000502:	d11e      	bne.n	8000542 <readDecreaseButton+0x82>
		if (firstReadDec) {
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <readDecreaseButton+0x8c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d014      	beq.n	8000536 <readDecreaseButton+0x76>
			timeDec++;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <readDecreaseButton+0x94>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <readDecreaseButton+0x94>)
 8000516:	801a      	strh	r2, [r3, #0]
			if (timeDec >= (BUTTON_THRESHOLD + BUTTON_PERIOD)) {
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <readDecreaseButton+0x94>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2b95      	cmp	r3, #149	; 0x95
 800051e:	d906      	bls.n	800052e <readDecreaseButton+0x6e>
				timeDec = BUTTON_THRESHOLD;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <readDecreaseButton+0x94>)
 8000522:	2264      	movs	r2, #100	; 0x64
 8000524:	801a      	strh	r2, [r3, #0]
				isDecBtnPressed = Button_Pressed_Increase;
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <readDecreaseButton+0x98>)
 8000528:	2202      	movs	r2, #2
 800052a:	701a      	strb	r2, [r3, #0]
		} else {
			timeDec = 0;
			isDecBtnPressed = Button_Not_Pressed;
		}
	}
}
 800052c:	e009      	b.n	8000542 <readDecreaseButton+0x82>
				isDecBtnPressed = Button_Pressed;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <readDecreaseButton+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
}
 8000534:	e005      	b.n	8000542 <readDecreaseButton+0x82>
			timeDec = 0;
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <readDecreaseButton+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
			isDecBtnPressed = Button_Not_Pressed;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <readDecreaseButton+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000102 	.word	0x20000102
 800054c:	20000101 	.word	0x20000101
 8000550:	40011000 	.word	0x40011000
 8000554:	2000009a 	.word	0x2000009a
 8000558:	20000095 	.word	0x20000095

0800055c <buttonDecreaseValue>:


uint8_t buttonDecreaseValue(uint8_t inputValue, void(* function)(uint8_t), uint8_t threshold) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	switch(decreaseButtonStatus) {
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <buttonDecreaseValue+0xb4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d023      	beq.n	80005bc <buttonDecreaseValue+0x60>
 8000574:	2b02      	cmp	r3, #2
 8000576:	d026      	beq.n	80005c6 <buttonDecreaseValue+0x6a>
 8000578:	2b00      	cmp	r3, #0
 800057a:	d143      	bne.n	8000604 <buttonDecreaseValue+0xa8>
	case Button_Not_Pressed:
		if (isDecBtnPressed == Button_Pressed) {
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <buttonDecreaseValue+0xb8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d116      	bne.n	80005b2 <buttonDecreaseValue+0x56>
			inputValue -= BUTTON_STEP;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	3b01      	subs	r3, #1
 8000588:	71fb      	strb	r3, [r7, #7]
			if (inputValue > threshold) inputValue = threshold - BUTTON_STEP;
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	429a      	cmp	r2, r3
 8000590:	d903      	bls.n	800059a <buttonDecreaseValue+0x3e>
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	3b01      	subs	r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	e007      	b.n	80005aa <buttonDecreaseValue+0x4e>
			else inputValue = inputValue % threshold;
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	79ba      	ldrb	r2, [r7, #6]
 800059e:	fbb3 f1f2 	udiv	r1, r3, r2
 80005a2:	fb02 f201 	mul.w	r2, r2, r1
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	71fb      	strb	r3, [r7, #7]
			(* function)(inputValue);
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	4610      	mov	r0, r2
 80005b0:	4798      	blx	r3
		}
		decreaseButtonStatus = isDecBtnPressed;
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <buttonDecreaseValue+0xb8>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <buttonDecreaseValue+0xb4>)
 80005b8:	701a      	strb	r2, [r3, #0]
		break;
 80005ba:	e023      	b.n	8000604 <buttonDecreaseValue+0xa8>
	case Button_Pressed:
		decreaseButtonStatus = isDecBtnPressed;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <buttonDecreaseValue+0xb8>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <buttonDecreaseValue+0xb4>)
 80005c2:	701a      	strb	r2, [r3, #0]
		break;
 80005c4:	e01e      	b.n	8000604 <buttonDecreaseValue+0xa8>
	case Button_Pressed_Increase:
		inputValue -= BUTTON_STEP;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
		if (inputValue > threshold) inputValue = threshold - BUTTON_STEP;
 80005cc:	79fa      	ldrb	r2, [r7, #7]
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d903      	bls.n	80005dc <buttonDecreaseValue+0x80>
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e007      	b.n	80005ec <buttonDecreaseValue+0x90>
		else inputValue = inputValue % threshold;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005e4:	fb02 f201 	mul.w	r2, r2, r1
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	71fb      	strb	r3, [r7, #7]
		(* function)(inputValue);
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	4610      	mov	r0, r2
 80005f2:	4798      	blx	r3
		decreaseButtonStatus = isDecBtnPressed = Button_Pressed;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <buttonDecreaseValue+0xb8>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <buttonDecreaseValue+0xb8>)
 80005fc:	781a      	ldrb	r2, [r3, #0]
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <buttonDecreaseValue+0xb4>)
 8000600:	701a      	strb	r2, [r3, #0]
		break;
 8000602:	bf00      	nop
	}
	return inputValue;
 8000604:	79fb      	ldrb	r3, [r7, #7]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000091 	.word	0x20000091
 8000614:	20000095 	.word	0x20000095

08000618 <readModeButton>:

void readModeButton(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	firstReadMode = secondReadMode;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <readModeButton+0x40>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <readModeButton+0x44>)
 8000622:	701a      	strb	r2, [r3, #0]
	secondReadMode = !HAL_GPIO_ReadPin(ModeBtn_Port, ModeBtn_Pin);
 8000624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <readModeButton+0x48>)
 800062a:	f002 f89b 	bl	8002764 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
 800063a:	461a      	mov	r2, r3
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <readModeButton+0x40>)
 800063e:	701a      	strb	r2, [r3, #0]
	if (firstReadMode==secondReadMode) {
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <readModeButton+0x44>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <readModeButton+0x40>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	d103      	bne.n	8000654 <readModeButton+0x3c>
		isModeBtnPressed = firstReadMode;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <readModeButton+0x44>)
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <readModeButton+0x4c>)
 8000652:	701a      	strb	r2, [r3, #0]
	}
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000fe 	.word	0x200000fe
 800065c:	200000fc 	.word	0x200000fc
 8000660:	40010c00 	.word	0x40010c00
 8000664:	20000096 	.word	0x20000096

08000668 <buttonChangeMode>:

uint8_t buttonChangeMode(uint8_t mode, uint8_t maxNumberOfMode, void(* function)(uint8_t)) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	switch(modeButtonStatus) {
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <buttonChangeMode+0x64>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <buttonChangeMode+0x22>
 8000680:	2b00      	cmp	r3, #0
 8000682:	db1d      	blt.n	80006c0 <buttonChangeMode+0x58>
 8000684:	2b02      	cmp	r3, #2
 8000686:	dc1b      	bgt.n	80006c0 <buttonChangeMode+0x58>
 8000688:	e015      	b.n	80006b6 <buttonChangeMode+0x4e>
	case Button_Not_Pressed:
		if (isModeBtnPressed) {
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <buttonChangeMode+0x68>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00c      	beq.n	80006ac <buttonChangeMode+0x44>
			(* function)(mode);
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	4610      	mov	r0, r2
 8000698:	4798      	blx	r3
			mode = (mode + 1) % maxNumberOfMode;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	3301      	adds	r3, #1
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80006a4:	fb02 f201 	mul.w	r2, r2, r1
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	71fb      	strb	r3, [r7, #7]
		}
		modeButtonStatus = isModeBtnPressed;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <buttonChangeMode+0x68>)
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <buttonChangeMode+0x64>)
 80006b2:	701a      	strb	r2, [r3, #0]
		break;
 80006b4:	e004      	b.n	80006c0 <buttonChangeMode+0x58>
	case Button_Pressed: case Button_Pressed_Increase:
		modeButtonStatus = isModeBtnPressed;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <buttonChangeMode+0x68>)
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <buttonChangeMode+0x64>)
 80006bc:	701a      	strb	r2, [r3, #0]
		break;
 80006be:	bf00      	nop
	}
	return mode;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000092 	.word	0x20000092
 80006d0:	20000096 	.word	0x20000096

080006d4 <readDecideButton>:

void readDecideButton(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	R1 = R2;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <readDecideButton+0x40>)
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <readDecideButton+0x44>)
 80006de:	701a      	strb	r2, [r3, #0]
	R2 = !HAL_GPIO_ReadPin(TempOrHumidBtn_Port, TempOrHumidBtn_Pin);
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <readDecideButton+0x48>)
 80006e6:	f002 f83d 	bl	8002764 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <readDecideButton+0x40>)
 80006fa:	701a      	strb	r2, [r3, #0]
	if (R1 == R2) {
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <readDecideButton+0x44>)
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <readDecideButton+0x40>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d103      	bne.n	8000710 <readDecideButton+0x3c>
		isDecideBtnPressed = R1;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <readDecideButton+0x44>)
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <readDecideButton+0x4c>)
 800070e:	701a      	strb	r2, [r3, #0]
	}
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000103 	.word	0x20000103
 8000718:	20000100 	.word	0x20000100
 800071c:	40010c00 	.word	0x40010c00
 8000720:	20000097 	.word	0x20000097

08000724 <buttonDecide>:

uint8_t buttonDecide(uint8_t mode, void (* function)(uint8_t)) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
	switch(decideButtonStatus) {
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <buttonDecide+0x5c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d004      	beq.n	8000742 <buttonDecide+0x1e>
 8000738:	2b00      	cmp	r3, #0
 800073a:	db1c      	blt.n	8000776 <buttonDecide+0x52>
 800073c:	2b02      	cmp	r3, #2
 800073e:	dc1a      	bgt.n	8000776 <buttonDecide+0x52>
 8000740:	e014      	b.n	800076c <buttonDecide+0x48>
	case Button_Not_Pressed:
		if (isDecideBtnPressed) {
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <buttonDecide+0x60>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00b      	beq.n	8000762 <buttonDecide+0x3e>
			(* function)(mode);
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	4610      	mov	r0, r2
 8000750:	4798      	blx	r3
			mode = (mode + 1) % 2;
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3301      	adds	r3, #1
 8000756:	2b00      	cmp	r3, #0
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	71fb      	strb	r3, [r7, #7]
		}
		decideButtonStatus = isDecideBtnPressed;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <buttonDecide+0x60>)
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <buttonDecide+0x5c>)
 8000768:	701a      	strb	r2, [r3, #0]
		break;
 800076a:	e004      	b.n	8000776 <buttonDecide+0x52>
	case Button_Pressed: case Button_Pressed_Increase:
		decideButtonStatus = isDecideBtnPressed;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <buttonDecide+0x60>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <buttonDecide+0x5c>)
 8000772:	701a      	strb	r2, [r3, #0]
		break;
 8000774:	bf00      	nop
	}
	return mode;
 8000776:	79fb      	ldrb	r3, [r7, #7]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000093 	.word	0x20000093
 8000784:	20000097 	.word	0x20000097

08000788 <turnOnFan1>:
#include <stdlib.h>

uint8_t powerOfFan1 = 0;
uint8_t countFan = 0;

HAL_StatusTypeDef turnOnFan1(uint8_t Timeout) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000792:	f001 fcdd 	bl	8002150 <HAL_GetTick>
 8000796:	60f8      	str	r0, [r7, #12]

	powerOfFan1 = 1;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <turnOnFan1+0x68>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
	countFan = 0;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <turnOnFan1+0x6c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Fan1_Port, Fan1_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <turnOnFan1+0x70>)
 80007aa:	f001 fff2 	bl	8002792 <HAL_GPIO_WritePin>

	while (!HAL_GPIO_ReadPin(Fan1_Port, Fan1_Pin)) {
 80007ae:	e012      	b.n	80007d6 <turnOnFan1+0x4e>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 80007b0:	f001 fcce 	bl	8002150 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dd01      	ble.n	80007cc <turnOnFan1+0x44>
 80007c8:	2303      	movs	r3, #3
 80007ca:	e00c      	b.n	80007e6 <turnOnFan1+0x5e>
		HAL_GPIO_WritePin(Fan1_Port, Fan1_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <turnOnFan1+0x70>)
 80007d2:	f001 ffde 	bl	8002792 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(Fan1_Port, Fan1_Pin)) {
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	4807      	ldr	r0, [pc, #28]	; (80007f8 <turnOnFan1+0x70>)
 80007da:	f001 ffc3 	bl	8002764 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0e5      	beq.n	80007b0 <turnOnFan1+0x28>
	}
	return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000009c 	.word	0x2000009c
 80007f4:	2000009d 	.word	0x2000009d
 80007f8:	40011000 	.word	0x40011000

080007fc <getPowerFan1>:

uint8_t getPowerFan1(void) {
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	return powerOfFan1;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <getPowerFan1+0x10>)
 8000802:	781b      	ldrb	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	2000009c 	.word	0x2000009c

08000810 <runFan1>:

void runFan1(uint8_t humidity) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	uint8_t frequency = 100 - (humidity/10)*10;
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <runFan1+0x54>)
 800081e:	fba2 2303 	umull	r2, r3, r2, r3
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	0152      	lsls	r2, r2, #5
 800082a:	1ad2      	subs	r2, r2, r3
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	3364      	adds	r3, #100	; 0x64
 8000836:	73fb      	strb	r3, [r7, #15]
	countFan++;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <runFan1+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <runFan1+0x58>)
 8000842:	701a      	strb	r2, [r3, #0]
	if (countFan == frequency) {
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <runFan1+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	7bfa      	ldrb	r2, [r7, #15]
 800084a:	429a      	cmp	r2, r3
 800084c:	d106      	bne.n	800085c <runFan1+0x4c>
		countFan = 0;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <runFan1+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(Fan1_Port, Fan1_Pin);
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <runFan1+0x5c>)
 8000858:	f001 ffb3 	bl	80027c2 <HAL_GPIO_TogglePin>
	}
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	cccccccd 	.word	0xcccccccd
 8000868:	2000009d 	.word	0x2000009d
 800086c:	40011000 	.word	0x40011000

08000870 <turnOffFan1>:

HAL_StatusTypeDef turnOffFan1(uint8_t Timeout) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 800087a:	f001 fc69 	bl	8002150 <HAL_GetTick>
 800087e:	60f8      	str	r0, [r7, #12]

	powerOfFan1 = 0;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <turnOffFan1+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Fan1_Port, Fan1_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <turnOffFan1+0x64>)
 800088c:	f001 ff81 	bl	8002792 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(Fan1_Port, Fan1_Pin)) {
 8000890:	e012      	b.n	80008b8 <turnOffFan1+0x48>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000892:	f001 fc5d 	bl	8002150 <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80008a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	dd01      	ble.n	80008ae <turnOffFan1+0x3e>
 80008aa:	2303      	movs	r3, #3
 80008ac:	e00c      	b.n	80008c8 <turnOffFan1+0x58>
		HAL_GPIO_WritePin(Fan1_Port, Fan1_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <turnOffFan1+0x64>)
 80008b4:	f001 ff6d 	bl	8002792 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(Fan1_Port, Fan1_Pin)) {
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <turnOffFan1+0x64>)
 80008bc:	f001 ff52 	bl	8002764 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1e5      	bne.n	8000892 <turnOffFan1+0x22>
	}
	return HAL_OK;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000009c 	.word	0x2000009c
 80008d4:	40011000 	.word	0x40011000

080008d8 <turnOnFan2>:

HAL_StatusTypeDef turnOnFan2(uint8_t Timeout) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 80008e2:	f001 fc35 	bl	8002150 <HAL_GetTick>
 80008e6:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Fan2_Port, Fan2_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2120      	movs	r1, #32
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <turnOnFan2+0x5c>)
 80008ee:	f001 ff50 	bl	8002792 <HAL_GPIO_WritePin>

	while (!HAL_GPIO_ReadPin(Fan2_Port, Fan2_Pin)) {
 80008f2:	e012      	b.n	800091a <turnOnFan2+0x42>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 80008f4:	f001 fc2c 	bl	8002150 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000902:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	429a      	cmp	r2, r3
 800090a:	dd01      	ble.n	8000910 <turnOnFan2+0x38>
 800090c:	2303      	movs	r3, #3
 800090e:	e00c      	b.n	800092a <turnOnFan2+0x52>
		HAL_GPIO_WritePin(Fan2_Port, Fan2_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2120      	movs	r1, #32
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <turnOnFan2+0x5c>)
 8000916:	f001 ff3c 	bl	8002792 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(Fan2_Port, Fan2_Pin)) {
 800091a:	2120      	movs	r1, #32
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <turnOnFan2+0x5c>)
 800091e:	f001 ff21 	bl	8002764 <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0e5      	beq.n	80008f4 <turnOnFan2+0x1c>
	}
	return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40011000 	.word	0x40011000

08000938 <turnOffFan2>:

HAL_StatusTypeDef turnOffFan2(uint8_t Timeout) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000942:	f001 fc05 	bl	8002150 <HAL_GetTick>
 8000946:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Fan2_Port, Fan2_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2120      	movs	r1, #32
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <turnOffFan2+0x5c>)
 800094e:	f001 ff20 	bl	8002792 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(Fan2_Port, Fan2_Pin)) {
 8000952:	e012      	b.n	800097a <turnOffFan2+0x42>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000954:	f001 fbfc 	bl	8002150 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000962:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	429a      	cmp	r2, r3
 800096a:	dd01      	ble.n	8000970 <turnOffFan2+0x38>
 800096c:	2303      	movs	r3, #3
 800096e:	e00c      	b.n	800098a <turnOffFan2+0x52>
		HAL_GPIO_WritePin(Fan2_Port, Fan2_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <turnOffFan2+0x5c>)
 8000976:	f001 ff0c 	bl	8002792 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(Fan2_Port, Fan2_Pin)) {
 800097a:	2120      	movs	r1, #32
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <turnOffFan2+0x5c>)
 800097e:	f001 fef1 	bl	8002764 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d1e5      	bne.n	8000954 <turnOffFan2+0x1c>
	}
	return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40011000 	.word	0x40011000

08000998 <turnOnFan3>:

HAL_StatusTypeDef turnOnFan3(uint8_t Timeout) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 80009a2:	f001 fbd5 	bl	8002150 <HAL_GetTick>
 80009a6:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Fan3_Port, Fan3_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <turnOnFan3+0x60>)
 80009b0:	f001 feef 	bl	8002792 <HAL_GPIO_WritePin>

	while (!HAL_GPIO_ReadPin(Fan3_Port, Fan3_Pin)) {
 80009b4:	e013      	b.n	80009de <turnOnFan3+0x46>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 80009b6:	f001 fbcb 	bl	8002150 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009c4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dd01      	ble.n	80009d2 <turnOnFan3+0x3a>
 80009ce:	2303      	movs	r3, #3
 80009d0:	e00e      	b.n	80009f0 <turnOnFan3+0x58>
		HAL_GPIO_WritePin(Fan3_Port, Fan3_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <turnOnFan3+0x60>)
 80009da:	f001 feda 	bl	8002792 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(Fan3_Port, Fan3_Pin)) {
 80009de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <turnOnFan3+0x60>)
 80009e4:	f001 febe 	bl	8002764 <HAL_GPIO_ReadPin>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0e3      	beq.n	80009b6 <turnOnFan3+0x1e>
	}
	return HAL_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40010800 	.word	0x40010800

080009fc <turnOffFan3>:

HAL_StatusTypeDef turnOffFan3(uint8_t Timeout) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000a06:	f001 fba3 	bl	8002150 <HAL_GetTick>
 8000a0a:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Fan3_Port, Fan3_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <turnOffFan3+0x60>)
 8000a14:	f001 febd 	bl	8002792 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(Fan3_Port, Fan3_Pin)) {
 8000a18:	e013      	b.n	8000a42 <turnOffFan3+0x46>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000a1a:	f001 fb99 	bl	8002150 <HAL_GetTick>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a28:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dd01      	ble.n	8000a36 <turnOffFan3+0x3a>
 8000a32:	2303      	movs	r3, #3
 8000a34:	e00e      	b.n	8000a54 <turnOffFan3+0x58>
		HAL_GPIO_WritePin(Fan3_Port, Fan3_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <turnOffFan3+0x60>)
 8000a3e:	f001 fea8 	bl	8002792 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(Fan3_Port, Fan3_Pin)) {
 8000a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <turnOffFan3+0x60>)
 8000a48:	f001 fe8c 	bl	8002764 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1e3      	bne.n	8000a1a <turnOffFan3+0x1e>
	}
	return HAL_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010800 	.word	0x40010800

08000a60 <turnOnHeator>:

uint8_t getMaxTemperature(void) {
	return maxTemperature;
}

HAL_StatusTypeDef turnOnHeator(uint8_t Timeout) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000a6a:	f001 fb71 	bl	8002150 <HAL_GetTick>
 8000a6e:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Heator_Port, Heator_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <turnOnHeator+0x60>)
 8000a78:	f001 fe8b 	bl	8002792 <HAL_GPIO_WritePin>

	while (!HAL_GPIO_ReadPin(Heator_Port, Heator_Pin)) {
 8000a7c:	e013      	b.n	8000aa6 <turnOnHeator+0x46>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000a7e:	f001 fb67 	bl	8002150 <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a8c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	dd01      	ble.n	8000a9a <turnOnHeator+0x3a>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e00e      	b.n	8000ab8 <turnOnHeator+0x58>
		HAL_GPIO_WritePin(Heator_Port, Heator_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <turnOnHeator+0x60>)
 8000aa2:	f001 fe76 	bl	8002792 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(Heator_Port, Heator_Pin)) {
 8000aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <turnOnHeator+0x60>)
 8000aac:	f001 fe5a 	bl	8002764 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0e3      	beq.n	8000a7e <turnOnHeator+0x1e>
	}
	return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <turnOffHeator>:

HAL_StatusTypeDef turnOffHeator(uint8_t Timeout) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000ace:	f001 fb3f 	bl	8002150 <HAL_GetTick>
 8000ad2:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Heator_Port, Heator_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <turnOffHeator+0x60>)
 8000adc:	f001 fe59 	bl	8002792 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(Heator_Port, Heator_Pin)) {
 8000ae0:	e013      	b.n	8000b0a <turnOffHeator+0x46>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000ae2:	f001 fb35 	bl	8002150 <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000af0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dd01      	ble.n	8000afe <turnOffHeator+0x3a>
 8000afa:	2303      	movs	r3, #3
 8000afc:	e00e      	b.n	8000b1c <turnOffHeator+0x58>
		HAL_GPIO_WritePin(Heator_Port, Heator_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <turnOffHeator+0x60>)
 8000b06:	f001 fe44 	bl	8002792 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(Heator_Port, Heator_Pin)) {
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <turnOffHeator+0x60>)
 8000b10:	f001 fe28 	bl	8002764 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1e3      	bne.n	8000ae2 <turnOffHeator+0x1e>
	}
	return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40010800 	.word	0x40010800

08000b28 <turnOnHeatpump>:

#include "stm32f1xx_hal.h"
#include "heatpump.h"
#include <stdlib.h>

HAL_StatusTypeDef turnOnHeatpump(uint8_t Timeout) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000b32:	f001 fb0d 	bl	8002150 <HAL_GetTick>
 8000b36:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Heatpump_Port, Heatpump_Pin, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <turnOnHeatpump+0x60>)
 8000b40:	f001 fe27 	bl	8002792 <HAL_GPIO_WritePin>

	while (!HAL_GPIO_ReadPin(Heatpump_Port, Heatpump_Pin)) {
 8000b44:	e013      	b.n	8000b6e <turnOnHeatpump+0x46>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000b46:	f001 fb03 	bl	8002150 <HAL_GetTick>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b54:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dd01      	ble.n	8000b62 <turnOnHeatpump+0x3a>
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e00e      	b.n	8000b80 <turnOnHeatpump+0x58>
		HAL_GPIO_WritePin(Heatpump_Port, Heatpump_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <turnOnHeatpump+0x60>)
 8000b6a:	f001 fe12 	bl	8002792 <HAL_GPIO_WritePin>
	while (!HAL_GPIO_ReadPin(Heatpump_Port, Heatpump_Pin)) {
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <turnOnHeatpump+0x60>)
 8000b74:	f001 fdf6 	bl	8002764 <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0e3      	beq.n	8000b46 <turnOnHeatpump+0x1e>
	}
	return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40010c00 	.word	0x40010c00

08000b8c <turnOffHeatpump>:

HAL_StatusTypeDef turnOffHeatpump(uint8_t Timeout) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	uint32_t timeStart = HAL_GetTick();
 8000b96:	f001 fadb 	bl	8002150 <HAL_GetTick>
 8000b9a:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(Heatpump_Port, Heatpump_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	4812      	ldr	r0, [pc, #72]	; (8000bec <turnOffHeatpump+0x60>)
 8000ba4:	f001 fdf5 	bl	8002792 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(Heatpump_Port, Heatpump_Pin)) {
 8000ba8:	e013      	b.n	8000bd2 <turnOffHeatpump+0x46>
		if (abs(HAL_GetTick() - timeStart) > Timeout) return HAL_TIMEOUT;
 8000baa:	f001 fad1 	bl	8002150 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bb8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	dd01      	ble.n	8000bc6 <turnOffHeatpump+0x3a>
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e00e      	b.n	8000be4 <turnOffHeatpump+0x58>
		HAL_GPIO_WritePin(Heatpump_Port, Heatpump_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <turnOffHeatpump+0x60>)
 8000bce:	f001 fde0 	bl	8002792 <HAL_GPIO_WritePin>
	while (HAL_GPIO_ReadPin(Heatpump_Port, Heatpump_Pin)) {
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <turnOffHeatpump+0x60>)
 8000bd8:	f001 fdc4 	bl	8002764 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1e3      	bne.n	8000baa <turnOffHeatpump+0x1e>
	}
	return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40010c00 	.word	0x40010c00

08000bf0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af02      	add	r7, sp, #8
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f023 030f 	bic.w	r3, r3, #15
 8000c00:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	f043 030c 	orr.w	r3, r3, #12
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c1c:	7bbb      	ldrb	r3, [r7, #14]
 8000c1e:	f043 030c 	orr.w	r3, r3, #12
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c26:	7bbb      	ldrb	r3, [r7, #14]
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c30:	f107 0208 	add.w	r2, r7, #8
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2304      	movs	r3, #4
 8000c3a:	214e      	movs	r1, #78	; 0x4e
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <lcd_send_cmd+0x5c>)
 8000c3e:	f001 ff11 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000104 	.word	0x20000104

08000c50 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	f043 030d 	orr.w	r3, r3, #13
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f043 0309 	orr.w	r3, r3, #9
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	f043 030d 	orr.w	r3, r3, #13
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	f043 0309 	orr.w	r3, r3, #9
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c90:	f107 0208 	add.w	r2, r7, #8
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2304      	movs	r3, #4
 8000c9a:	214e      	movs	r1, #78	; 0x4e
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <lcd_send_data+0x5c>)
 8000c9e:	f001 fee1 	bl	8002a64 <HAL_I2C_Master_Transmit>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000104 	.word	0x20000104

08000cb0 <lcd_clear>:

void lcd_clear (void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000cb6:	2080      	movs	r0, #128	; 0x80
 8000cb8:	f7ff ff9a 	bl	8000bf0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	e005      	b.n	8000cce <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000cc2:	2020      	movs	r0, #32
 8000cc4:	f7ff ffc4 	bl	8000c50 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b45      	cmp	r3, #69	; 0x45
 8000cd2:	ddf6      	ble.n	8000cc2 <lcd_clear+0x12>
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d002      	beq.n	8000cf2 <lcd_put_cur+0x16>
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d005      	beq.n	8000cfc <lcd_put_cur+0x20>
 8000cf0:	e009      	b.n	8000d06 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	603b      	str	r3, [r7, #0]
            break;
 8000cfa:	e004      	b.n	8000d06 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d02:	603b      	str	r3, [r7, #0]
            break;
 8000d04:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff70 	bl	8000bf0 <lcd_send_cmd>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <lcd_init>:


void lcd_init (void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f001 fa21 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d22:	2030      	movs	r0, #48	; 0x30
 8000d24:	f7ff ff64 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f001 fa1b 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d2e:	2030      	movs	r0, #48	; 0x30
 8000d30:	f7ff ff5e 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d34:	2001      	movs	r0, #1
 8000d36:	f001 fa15 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d3a:	2030      	movs	r0, #48	; 0x30
 8000d3c:	f7ff ff58 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f001 fa0f 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d46:	2020      	movs	r0, #32
 8000d48:	f7ff ff52 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f001 fa09 	bl	8002164 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d52:	2028      	movs	r0, #40	; 0x28
 8000d54:	f7ff ff4c 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f001 fa03 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d5e:	2008      	movs	r0, #8
 8000d60:	f7ff ff46 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 f9fd 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff ff40 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f001 f9f7 	bl	8002164 <HAL_Delay>
	HAL_Delay(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f001 f9f4 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d7c:	2006      	movs	r0, #6
 8000d7e:	f7ff ff37 	bl	8000bf0 <lcd_send_cmd>
	HAL_Delay(1);
 8000d82:	2001      	movs	r0, #1
 8000d84:	f001 f9ee 	bl	8002164 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d88:	200c      	movs	r0, #12
 8000d8a:	f7ff ff31 	bl	8000bf0 <lcd_send_cmd>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d9a:	e006      	b.n	8000daa <lcd_send_string+0x18>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff53 	bl	8000c50 <lcd_send_data>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f4      	bne.n	8000d9c <lcd_send_string+0xa>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <prepareLCD>:

void prepareLCD(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	char *str = "T:";
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <prepareLCD+0x78>)
 8000dc4:	607b      	str	r3, [r7, #4]
	lcd_clear();
 8000dc6:	f7ff ff73 	bl	8000cb0 <lcd_clear>
	lcd_put_cur(0, 0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff85 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(str);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffdd 	bl	8000d92 <lcd_send_string>
	lcd_put_cur(1, 0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff ff7e 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(str);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffd6 	bl	8000d92 <lcd_send_string>
	str = "H:";
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <prepareLCD+0x7c>)
 8000de8:	607b      	str	r3, [r7, #4]
	lcd_put_cur(0, 6);
 8000dea:	2106      	movs	r1, #6
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ff75 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(str);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffcd 	bl	8000d92 <lcd_send_string>
	lcd_put_cur(1, 6);
 8000df8:	2106      	movs	r1, #6
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff6e 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(str);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffc6 	bl	8000d92 <lcd_send_string>
	str = "M:";
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <prepareLCD+0x80>)
 8000e08:	607b      	str	r3, [r7, #4]
	lcd_put_cur(0, 13);
 8000e0a:	210d      	movs	r1, #13
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff ff65 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(str);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffbd 	bl	8000d92 <lcd_send_string>
	str = "P:";
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <prepareLCD+0x84>)
 8000e1a:	607b      	str	r3, [r7, #4]
	lcd_put_cur(1, 12);
 8000e1c:	210c      	movs	r1, #12
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff ff5c 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(str);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffb4 	bl	8000d92 <lcd_send_string>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08004930 	.word	0x08004930
 8000e38:	08004934 	.word	0x08004934
 8000e3c:	08004938 	.word	0x08004938
 8000e40:	0800493c 	.word	0x0800493c

08000e44 <getTempAndHumid>:
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "%s\r\n", input);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf, uart_buf_len, 100);
}

void getTempAndHumid(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	if (currentMode!=simulation) {
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <getTempAndHumid+0x38>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00a      	beq.n	8000e66 <getTempAndHumid+0x22>
		if (getDHT11Data(&result,TIME_OUT_DHT) == HAL_TIMEOUT) {
 8000e50:	2114      	movs	r1, #20
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <getTempAndHumid+0x3c>)
 8000e54:	f7ff fa56 	bl	8000304 <getDHT11Data>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d10b      	bne.n	8000e76 <getTempAndHumid+0x32>
			globalTimeout = HAL_TIMEOUT;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <getTempAndHumid+0x40>)
 8000e60:	2203      	movs	r2, #3
 8000e62:	701a      	strb	r2, [r3, #0]
			return;
 8000e64:	e009      	b.n	8000e7a <getTempAndHumid+0x36>
		}
	}
	else {
		result.temperature[0] = s_temp;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <getTempAndHumid+0x44>)
 8000e68:	781a      	ldrb	r2, [r3, #0]
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <getTempAndHumid+0x3c>)
 8000e6c:	709a      	strb	r2, [r3, #2]
		result.humidity[0] = s_humid;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <getTempAndHumid+0x48>)
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <getTempAndHumid+0x3c>)
 8000e74:	701a      	strb	r2, [r3, #0]
	}
	displayLCD();
 8000e76:	f000 f80b 	bl	8000e90 <displayLCD>
}
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000009e 	.word	0x2000009e
 8000e80:	200001b0 	.word	0x200001b0
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	200001f9 	.word	0x200001f9
 8000e8c:	200001a0 	.word	0x200001a0

08000e90 <displayLCD>:

void displayLCD(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
//	else {
//		t = s_temp;
//		h = s_humid;
//	}

	temp[0] = result.temperature[0] / 10 + 48;
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <displayLCD+0x9c>)
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <displayLCD+0xa0>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3330      	adds	r3, #48	; 0x30
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	713b      	strb	r3, [r7, #4]
	temp[1] = result.temperature[0] % 10 + 48;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <displayLCD+0x9c>)
 8000eac:	789a      	ldrb	r2, [r3, #2]
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <displayLCD+0xa0>)
 8000eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb4:	08d9      	lsrs	r1, r3, #3
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3330      	adds	r3, #48	; 0x30
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	717b      	strb	r3, [r7, #5]
	temp[2] = '\0';
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71bb      	strb	r3, [r7, #6]

	hum[0] = result.humidity[0] / 10 + 48;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <displayLCD+0x9c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <displayLCD+0xa0>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	08db      	lsrs	r3, r3, #3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3330      	adds	r3, #48	; 0x30
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	703b      	strb	r3, [r7, #0]
	hum[1] = result.humidity[0] % 10 + 48;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <displayLCD+0x9c>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <displayLCD+0xa0>)
 8000ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8000eea:	08d9      	lsrs	r1, r3, #3
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	3330      	adds	r3, #48	; 0x30
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	707b      	strb	r3, [r7, #1]
	hum[2] = '\0';
 8000efe:	2300      	movs	r3, #0
 8000f00:	70bb      	strb	r3, [r7, #2]

	lcd_put_cur(0, 2);
 8000f02:	2102      	movs	r1, #2
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fee9 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(temp);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff40 	bl	8000d92 <lcd_send_string>
	lcd_put_cur(0, 8);
 8000f12:	2108      	movs	r1, #8
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fee1 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(hum);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff38 	bl	8000d92 <lcd_send_string>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001b0 	.word	0x200001b0
 8000f30:	cccccccd 	.word	0xcccccccd

08000f34 <displayChangedMaxTemp>:

void displayChangedMaxTemp(uint8_t input) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
//	char uart_buf[50];
//	int uart_buf_len;
//	uart_buf_len = sprintf(uart_buf, "\033[2J%s%u    \r", "Adjust Maximum Temperature: ", input);
//	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf, uart_buf_len, 100);
	char temp[3];
	temp[0] = input / 10 + 48;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <displayChangedMaxTemp+0x58>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3330      	adds	r3, #48	; 0x30
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	733b      	strb	r3, [r7, #12]
	temp[1] = input % 10 + 48;
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <displayChangedMaxTemp+0x58>)
 8000f54:	fba3 1302 	umull	r1, r3, r3, r2
 8000f58:	08d9      	lsrs	r1, r3, #3
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	440b      	add	r3, r1
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3330      	adds	r3, #48	; 0x30
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	737b      	strb	r3, [r7, #13]
	temp[2] = '\0';
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73bb      	strb	r3, [r7, #14]
	lcd_put_cur(1, 2);
 8000f70:	2102      	movs	r1, #2
 8000f72:	2001      	movs	r0, #1
 8000f74:	f7ff feb2 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(temp);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff08 	bl	8000d92 <lcd_send_string>
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	cccccccd 	.word	0xcccccccd

08000f90 <displayChangedMaxHum>:
void displayChangedMaxHum(uint8_t input) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
//	char uart_buf[50];
//	int uart_buf_len;
//	uart_buf_len = sprintf(uart_buf, "\033[2J%s%u    \r", "Adjust Maximum Humidity: ", input);
//	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf, uart_buf_len, 100);
	char humid[3];
	humid[0] = input / 10 + 48;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <displayChangedMaxHum+0x58>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3330      	adds	r3, #48	; 0x30
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	733b      	strb	r3, [r7, #12]
	humid[1] = input % 10 + 48;
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <displayChangedMaxHum+0x58>)
 8000fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb4:	08d9      	lsrs	r1, r3, #3
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3330      	adds	r3, #48	; 0x30
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	737b      	strb	r3, [r7, #13]
	humid[2] = '\0';
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73bb      	strb	r3, [r7, #14]
	lcd_put_cur(1, 8);
 8000fcc:	2108      	movs	r1, #8
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fe84 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(humid);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff feda 	bl	8000d92 <lcd_send_string>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	cccccccd 	.word	0xcccccccd

08000fec <displayChangedPeriod>:

void displayChangedPeriod(uint8_t input) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
//	char uart_buf[50];
//	int uart_buf_len;
//	uart_buf_len = sprintf(uart_buf, "\033[2J%s%u    \r", "Adjust Turn On Period: ", input);
//	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf, uart_buf_len, 100);
	char period[3];
	period[0] = input / 10 + 48;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <displayChangedPeriod+0x58>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3330      	adds	r3, #48	; 0x30
 8001004:	b2db      	uxtb	r3, r3
 8001006:	733b      	strb	r3, [r7, #12]
	period[1] = input % 10 + 48;
 8001008:	79fa      	ldrb	r2, [r7, #7]
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <displayChangedPeriod+0x58>)
 800100c:	fba3 1302 	umull	r1, r3, r3, r2
 8001010:	08d9      	lsrs	r1, r3, #3
 8001012:	460b      	mov	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	b2db      	uxtb	r3, r3
 800101e:	3330      	adds	r3, #48	; 0x30
 8001020:	b2db      	uxtb	r3, r3
 8001022:	737b      	strb	r3, [r7, #13]
	period[2] = '\0';
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]
	lcd_put_cur(1, 14);
 8001028:	210e      	movs	r1, #14
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff fe56 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(period);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff feac 	bl	8000d92 <lcd_send_string>
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	cccccccd 	.word	0xcccccccd

08001048 <displayTemp>:

void displayTemp(uint8_t input) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	char temp[3];
	temp[0] = input / 10 + 48;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <displayTemp+0x58>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	3330      	adds	r3, #48	; 0x30
 8001060:	b2db      	uxtb	r3, r3
 8001062:	733b      	strb	r3, [r7, #12]
	temp[1] = input % 10 + 48;
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <displayTemp+0x58>)
 8001068:	fba3 1302 	umull	r1, r3, r3, r2
 800106c:	08d9      	lsrs	r1, r3, #3
 800106e:	460b      	mov	r3, r1
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3330      	adds	r3, #48	; 0x30
 800107c:	b2db      	uxtb	r3, r3
 800107e:	737b      	strb	r3, [r7, #13]
	temp[2] = '\0';
 8001080:	2300      	movs	r3, #0
 8001082:	73bb      	strb	r3, [r7, #14]
	lcd_put_cur(0, 2);
 8001084:	2102      	movs	r1, #2
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fe28 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(temp);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe7e 	bl	8000d92 <lcd_send_string>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	cccccccd 	.word	0xcccccccd

080010a4 <displayHumid>:

void displayHumid(uint8_t input) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	char humid[3];
	humid[0] = input / 10 + 48;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <displayHumid+0x58>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3330      	adds	r3, #48	; 0x30
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	733b      	strb	r3, [r7, #12]
	humid[1] = input % 10 + 48;
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <displayHumid+0x58>)
 80010c4:	fba3 1302 	umull	r1, r3, r3, r2
 80010c8:	08d9      	lsrs	r1, r3, #3
 80010ca:	460b      	mov	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3330      	adds	r3, #48	; 0x30
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	737b      	strb	r3, [r7, #13]
	humid[2] = '\0';
 80010dc:	2300      	movs	r3, #0
 80010de:	73bb      	strb	r3, [r7, #14]
	lcd_put_cur(0, 8);
 80010e0:	2108      	movs	r1, #8
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fdfa 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(humid);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fe50 	bl	8000d92 <lcd_send_string>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	cccccccd 	.word	0xcccccccd

08001100 <displayMode>:
void displayMode(uint8_t input) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	char mode[2];
	mode[0] = input + 48;
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	3330      	adds	r3, #48	; 0x30
 800110e:	b2db      	uxtb	r3, r3
 8001110:	733b      	strb	r3, [r7, #12]
	mode[1] = '\0';
 8001112:	2300      	movs	r3, #0
 8001114:	737b      	strb	r3, [r7, #13]
	lcd_put_cur(0,15);
 8001116:	210f      	movs	r1, #15
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fddf 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(mode);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fe35 	bl	8000d92 <lcd_send_string>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <displayTimeout>:

void displayTimeout(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	lcd_clear();
 8001134:	f7ff fdbc 	bl	8000cb0 <lcd_clear>
	lcd_put_cur(0, 5);
 8001138:	2105      	movs	r1, #5
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fdce 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("ERROR");
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <displayTimeout+0x28>)
 8001142:	f7ff fe26 	bl	8000d92 <lcd_send_string>
	lcd_put_cur(1, 4);
 8001146:	2104      	movs	r1, #4
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fdc7 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("TIME_OUT");
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <displayTimeout+0x2c>)
 8001150:	f7ff fe1f 	bl	8000d92 <lcd_send_string>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	08004950 	.word	0x08004950
 800115c:	08004958 	.word	0x08004958

08001160 <heator>:
	int uart_buf_len;
	uart_buf_len = sprintf(uart_buf, "\033[2J%s%u%s%u%s%u   \r", "T: ", maxTemp, " | H: ", maxHumid, " | P: ", period);
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buf, uart_buf_len, 100);
}

void heator(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if ((turnOnFan2(TIME_OUT_DEVICE) == HAL_TIMEOUT)
 8001164:	2005      	movs	r0, #5
 8001166:	f7ff fbb7 	bl	80008d8 <turnOnFan2>
 800116a:	4603      	mov	r3, r0
 800116c:	2b03      	cmp	r3, #3
 800116e:	d011      	beq.n	8001194 <heator+0x34>
		|| (turnOnHeator(TIME_OUT_DEVICE) == HAL_TIMEOUT)
 8001170:	2005      	movs	r0, #5
 8001172:	f7ff fc75 	bl	8000a60 <turnOnHeator>
 8001176:	4603      	mov	r3, r0
 8001178:	2b03      	cmp	r3, #3
 800117a:	d00b      	beq.n	8001194 <heator+0x34>
		|| (turnOffFan3(TIME_OUT_DEVICE) == HAL_TIMEOUT)
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff fc3d 	bl	80009fc <turnOffFan3>
 8001182:	4603      	mov	r3, r0
 8001184:	2b03      	cmp	r3, #3
 8001186:	d005      	beq.n	8001194 <heator+0x34>
		|| (turnOffHeatpump(TIME_OUT_DEVICE) == HAL_TIMEOUT)) {
 8001188:	2005      	movs	r0, #5
 800118a:	f7ff fcff 	bl	8000b8c <turnOffHeatpump>
 800118e:	4603      	mov	r3, r0
 8001190:	2b03      	cmp	r3, #3
 8001192:	d102      	bne.n	800119a <heator+0x3a>
		globalTimeout = HAL_TIMEOUT;
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <heator+0x40>)
 8001196:	2203      	movs	r2, #3
 8001198:	701a      	strb	r2, [r3, #0]
	}
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000a0 	.word	0x200000a0

080011a4 <heatpump>:

void heatpump(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	if ((turnOffFan2(TIME_OUT_DEVICE) == HAL_TIMEOUT)
 80011a8:	2005      	movs	r0, #5
 80011aa:	f7ff fbc5 	bl	8000938 <turnOffFan2>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d011      	beq.n	80011d8 <heatpump+0x34>
		|| (turnOffHeator(TIME_OUT_DEVICE) == HAL_TIMEOUT)
 80011b4:	2005      	movs	r0, #5
 80011b6:	f7ff fc85 	bl	8000ac4 <turnOffHeator>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d00b      	beq.n	80011d8 <heatpump+0x34>
		|| (turnOnFan3(TIME_OUT_DEVICE) == HAL_TIMEOUT)
 80011c0:	2005      	movs	r0, #5
 80011c2:	f7ff fbe9 	bl	8000998 <turnOnFan3>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d005      	beq.n	80011d8 <heatpump+0x34>
		|| (turnOnHeatpump(TIME_OUT_DEVICE) == HAL_TIMEOUT)) {
 80011cc:	2005      	movs	r0, #5
 80011ce:	f7ff fcab 	bl	8000b28 <turnOnHeatpump>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d102      	bne.n	80011de <heatpump+0x3a>
		globalTimeout = HAL_TIMEOUT;
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <heatpump+0x40>)
 80011da:	2203      	movs	r2, #3
 80011dc:	701a      	strb	r2, [r3, #0]
	}
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000a0 	.word	0x200000a0

080011e8 <normalRun>:

void normalRun(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	dispatchTask();
 80011ec:	f000 fd68 	bl	8001cc0 <dispatchTask>
	if (globalTimeout == HAL_TIMEOUT) return;
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <normalRun+0xb8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d04f      	beq.n	8001298 <normalRun+0xb0>

	if (currentMode == simulation) {
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <normalRun+0xbc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d107      	bne.n	8001210 <normalRun+0x28>
		result.temperature[0] = s_temp;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <normalRun+0xc0>)
 8001202:	781a      	ldrb	r2, [r3, #0]
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <normalRun+0xc4>)
 8001206:	709a      	strb	r2, [r3, #2]
		result.humidity[0] = s_humid;
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <normalRun+0xc8>)
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <normalRun+0xc4>)
 800120e:	701a      	strb	r2, [r3, #0]
	}

	if (result.humidity[0] >= maxHumid) {
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <normalRun+0xc4>)
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <normalRun+0xcc>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d310      	bcc.n	800123e <normalRun+0x56>
		if (!getPowerFan1()) {
 800121c:	f7ff faee 	bl	80007fc <getPowerFan1>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <normalRun+0x6c>
			globalTimeout = turnOnFan1(TIME_OUT_DEVICE);
 8001226:	2005      	movs	r0, #5
 8001228:	f7ff faae 	bl	8000788 <turnOnFan1>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <normalRun+0xb8>)
 8001232:	701a      	strb	r2, [r3, #0]
			if (globalTimeout == HAL_TIMEOUT) return;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <normalRun+0xb8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b03      	cmp	r3, #3
 800123a:	d10b      	bne.n	8001254 <normalRun+0x6c>
 800123c:	e02f      	b.n	800129e <normalRun+0xb6>
		}
	} else {
		globalTimeout = turnOffFan1(TIME_OUT_DEVICE);
 800123e:	2005      	movs	r0, #5
 8001240:	f7ff fb16 	bl	8000870 <turnOffFan1>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <normalRun+0xb8>)
 800124a:	701a      	strb	r2, [r3, #0]
		if (globalTimeout == HAL_TIMEOUT) return;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <normalRun+0xb8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d023      	beq.n	800129c <normalRun+0xb4>
	}

	if (result.temperature[0] >= maxTemp) {
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <normalRun+0xc4>)
 8001256:	789a      	ldrb	r2, [r3, #2]
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <normalRun+0xd0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d30f      	bcc.n	8001280 <normalRun+0x98>
		if ((turnOffFan2(TIME_OUT_DEVICE) == HAL_TIMEOUT) || (turnOffHeator(TIME_OUT_DEVICE) == HAL_TIMEOUT)) {
 8001260:	2005      	movs	r0, #5
 8001262:	f7ff fb69 	bl	8000938 <turnOffFan2>
 8001266:	4603      	mov	r3, r0
 8001268:	2b03      	cmp	r3, #3
 800126a:	d005      	beq.n	8001278 <normalRun+0x90>
 800126c:	2005      	movs	r0, #5
 800126e:	f7ff fc29 	bl	8000ac4 <turnOffHeator>
 8001272:	4603      	mov	r3, r0
 8001274:	2b03      	cmp	r3, #3
 8001276:	d103      	bne.n	8001280 <normalRun+0x98>
			globalTimeout = HAL_TIMEOUT;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <normalRun+0xb8>)
 800127a:	2203      	movs	r2, #3
 800127c:	701a      	strb	r2, [r3, #0]
			return;
 800127e:	e00e      	b.n	800129e <normalRun+0xb6>
		}
	}

	currentMode = buttonChangeMode(currentMode, 5, changeMode);
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <normalRun+0xbc>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <normalRun+0xd4>)
 8001286:	2105      	movs	r1, #5
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f9ed 	bl	8000668 <buttonChangeMode>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <normalRun+0xbc>)
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e002      	b.n	800129e <normalRun+0xb6>
	if (globalTimeout == HAL_TIMEOUT) return;
 8001298:	bf00      	nop
 800129a:	e000      	b.n	800129e <normalRun+0xb6>
		if (globalTimeout == HAL_TIMEOUT) return;
 800129c:	bf00      	nop
}
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000a0 	.word	0x200000a0
 80012a4:	2000009e 	.word	0x2000009e
 80012a8:	200001f9 	.word	0x200001f9
 80012ac:	200001b0 	.word	0x200001b0
 80012b0:	200001a0 	.word	0x200001a0
 80012b4:	20000001 	.word	0x20000001
 80012b8:	20000000 	.word	0x20000000
 80012bc:	080012c1 	.word	0x080012c1

080012c0 <changeMode>:

void changeMode(uint8_t inputMode) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	switch(inputMode) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d875      	bhi.n	80013bc <changeMode+0xfc>
 80012d0:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <changeMode+0x18>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	08001315 	.word	0x08001315
 80012e4:	0800132d 	.word	0x0800132d
 80012e8:	080013ab 	.word	0x080013ab
	case normal:
		adjustedTemp = maxTemp;
 80012ec:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <changeMode+0x104>)
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <changeMode+0x108>)
 80012f2:	701a      	strb	r2, [r3, #0]
		displayMode(adjustTemp);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff ff03 	bl	8001100 <displayMode>
		break;
 80012fa:	e05f      	b.n	80013bc <changeMode+0xfc>
	case adjustTemp:
		adjustedHumid = maxHumid;
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <changeMode+0x10c>)
 80012fe:	781a      	ldrb	r2, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <changeMode+0x110>)
 8001302:	701a      	strb	r2, [r3, #0]
		maxTemp = adjustedTemp;
 8001304:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <changeMode+0x108>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <changeMode+0x104>)
 800130a:	701a      	strb	r2, [r3, #0]
		displayMode(adjustHumid);
 800130c:	2002      	movs	r0, #2
 800130e:	f7ff fef7 	bl	8001100 <displayMode>
		break;
 8001312:	e053      	b.n	80013bc <changeMode+0xfc>
	case adjustHumid:
		maxHumid = adjustedHumid;
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <changeMode+0x110>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <changeMode+0x10c>)
 800131a:	701a      	strb	r2, [r3, #0]
		adjustedPeriod = period;
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <changeMode+0x114>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <changeMode+0x118>)
 8001322:	701a      	strb	r2, [r3, #0]
		displayMode(adjustPeriod);
 8001324:	2003      	movs	r0, #3
 8001326:	f7ff feeb 	bl	8001100 <displayMode>
		break;
 800132a:	e047      	b.n	80013bc <changeMode+0xfc>
	case adjustPeriod:
		period = adjustedPeriod;
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <changeMode+0x118>)
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <changeMode+0x114>)
 8001332:	701a      	strb	r2, [r3, #0]
		deleteAllTask();
 8001334:	f000 fd16 	bl	8001d64 <deleteAllTask>
		insertTaskBack(getTempAndHumid, 200);
 8001338:	21c8      	movs	r1, #200	; 0xc8
 800133a:	4828      	ldr	r0, [pc, #160]	; (80013dc <changeMode+0x11c>)
 800133c:	f000 fc48 	bl	8001bd0 <insertTaskBack>
		insertTaskFirstTime(heator, 0, period*ONE_SECOND);
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <changeMode+0x114>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	2364      	movs	r3, #100	; 0x64
 8001348:	fb03 f302 	mul.w	r3, r3, r2
 800134c:	461a      	mov	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	4823      	ldr	r0, [pc, #140]	; (80013e0 <changeMode+0x120>)
 8001352:	f000 fbdb 	bl	8001b0c <insertTaskFirstTime>
		insertTaskFirstTime(heatpump, period*ONE_SECOND, period*ONE_SECOND);
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <changeMode+0x114>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	2364      	movs	r3, #100	; 0x64
 800135e:	fb03 f302 	mul.w	r3, r3, r2
 8001362:	4619      	mov	r1, r3
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <changeMode+0x114>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	2364      	movs	r3, #100	; 0x64
 800136c:	fb03 f302 	mul.w	r3, r3, r2
 8001370:	461a      	mov	r2, r3
 8001372:	481c      	ldr	r0, [pc, #112]	; (80013e4 <changeMode+0x124>)
 8001374:	f000 fbca 	bl	8001b0c <insertTaskFirstTime>
		s_temp = s_tempAdjusted = result.temperature[0];
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <changeMode+0x128>)
 800137a:	789a      	ldrb	r2, [r3, #2]
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <changeMode+0x12c>)
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <changeMode+0x12c>)
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <changeMode+0x130>)
 8001386:	701a      	strb	r2, [r3, #0]
		s_humid = s_humidAdjusted = result.humidity[0];
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <changeMode+0x128>)
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <changeMode+0x134>)
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <changeMode+0x134>)
 8001392:	781a      	ldrb	r2, [r3, #0]
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <changeMode+0x138>)
 8001396:	701a      	strb	r2, [r3, #0]
		displayMode(simulation);
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff feb1 	bl	8001100 <displayMode>
		HAL_GPIO_WritePin(TempOrHumidLed_Port, TempOrHumidLed_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2104      	movs	r1, #4
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <changeMode+0x13c>)
 80013a4:	f001 f9f5 	bl	8002792 <HAL_GPIO_WritePin>
		break;
 80013a8:	e008      	b.n	80013bc <changeMode+0xfc>
	case simulation:
		displayMode(normal);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fea8 	bl	8001100 <displayMode>
		HAL_GPIO_WritePin(TempOrHumidLed_Port, TempOrHumidLed_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2104      	movs	r1, #4
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <changeMode+0x13c>)
 80013b6:	f001 f9ec 	bl	8002792 <HAL_GPIO_WritePin>
		break;
 80013ba:	bf00      	nop
	}
	//checkInformation();
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	200001b5 	.word	0x200001b5
 80013cc:	20000001 	.word	0x20000001
 80013d0:	200001b4 	.word	0x200001b4
 80013d4:	20000002 	.word	0x20000002
 80013d8:	200001ae 	.word	0x200001ae
 80013dc:	08000e45 	.word	0x08000e45
 80013e0:	08001161 	.word	0x08001161
 80013e4:	080011a5 	.word	0x080011a5
 80013e8:	200001b0 	.word	0x200001b0
 80013ec:	200001f8 	.word	0x200001f8
 80013f0:	200001f9 	.word	0x200001f9
 80013f4:	200001a1 	.word	0x200001a1
 80013f8:	200001a0 	.word	0x200001a0
 80013fc:	40010c00 	.word	0x40010c00

08001400 <changeChoice>:

void changeChoice(uint8_t inputChoice) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(TempOrHumidLed_Port, TempOrHumidLed_Pin);
 800140a:	2104      	movs	r1, #4
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <changeChoice+0x1c>)
 800140e:	f001 f9d8 	bl	80027c2 <HAL_GPIO_TogglePin>
//		break;
//	case humid:
//		s_humid = s_humidAdjusted;
//		break;
//	}
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40010c00 	.word	0x40010c00

08001420 <decideTempOrHumid>:

void decideTempOrHumid(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	switch(currentChoice) {
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <decideTempOrHumid+0x74>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <decideTempOrHumid+0x12>
 800142c:	2b01      	cmp	r3, #1
 800142e:	d017      	beq.n	8001460 <decideTempOrHumid+0x40>
	case  humid:
		s_humid = buttonIncreaseValue(s_humid, displayHumid, 101);
		s_humid = buttonDecreaseValue(s_humid, displayHumid, 101);
		break;
	}
}
 8001430:	e02d      	b.n	800148e <decideTempOrHumid+0x6e>
		s_temp = buttonIncreaseValue(s_temp, displayTemp, 61);
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <decideTempOrHumid+0x78>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	223d      	movs	r2, #61	; 0x3d
 8001438:	4918      	ldr	r1, [pc, #96]	; (800149c <decideTempOrHumid+0x7c>)
 800143a:	4618      	mov	r0, r3
 800143c:	f7fe fff2 	bl	8000424 <buttonIncreaseValue>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <decideTempOrHumid+0x78>)
 8001446:	701a      	strb	r2, [r3, #0]
		s_temp = buttonDecreaseValue(s_temp, displayTemp, 61);
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <decideTempOrHumid+0x78>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	223d      	movs	r2, #61	; 0x3d
 800144e:	4913      	ldr	r1, [pc, #76]	; (800149c <decideTempOrHumid+0x7c>)
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f883 	bl	800055c <buttonDecreaseValue>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <decideTempOrHumid+0x78>)
 800145c:	701a      	strb	r2, [r3, #0]
		break;
 800145e:	e016      	b.n	800148e <decideTempOrHumid+0x6e>
		s_humid = buttonIncreaseValue(s_humid, displayHumid, 101);
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <decideTempOrHumid+0x80>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2265      	movs	r2, #101	; 0x65
 8001466:	490f      	ldr	r1, [pc, #60]	; (80014a4 <decideTempOrHumid+0x84>)
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffdb 	bl	8000424 <buttonIncreaseValue>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <decideTempOrHumid+0x80>)
 8001474:	701a      	strb	r2, [r3, #0]
		s_humid = buttonDecreaseValue(s_humid, displayHumid, 101);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <decideTempOrHumid+0x80>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2265      	movs	r2, #101	; 0x65
 800147c:	4909      	ldr	r1, [pc, #36]	; (80014a4 <decideTempOrHumid+0x84>)
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f86c 	bl	800055c <buttonDecreaseValue>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <decideTempOrHumid+0x80>)
 800148a:	701a      	strb	r2, [r3, #0]
		break;
 800148c:	bf00      	nop
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000009f 	.word	0x2000009f
 8001498:	200001f9 	.word	0x200001f9
 800149c:	08001049 	.word	0x08001049
 80014a0:	200001a0 	.word	0x200001a0
 80014a4:	080010a5 	.word	0x080010a5

080014a8 <mainFSM>:

void mainFSM(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	switch(currentMode) {
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <mainFSM+0xe8>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d86a      	bhi.n	800158a <mainFSM+0xe2>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <mainFSM+0x14>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014d1 	.word	0x080014d1
 80014c0:	080014d7 	.word	0x080014d7
 80014c4:	08001509 	.word	0x08001509
 80014c8:	0800153b 	.word	0x0800153b
 80014cc:	0800156d 	.word	0x0800156d
	case normal:
		normalRun();
 80014d0:	f7ff fe8a 	bl	80011e8 <normalRun>
		break;
 80014d4:	e059      	b.n	800158a <mainFSM+0xe2>
	case adjustTemp:
		adjustedTemp = buttonIncreaseValue(adjustedTemp, displayChangedMaxTemp, 61);
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <mainFSM+0xec>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	223d      	movs	r2, #61	; 0x3d
 80014dc:	492e      	ldr	r1, [pc, #184]	; (8001598 <mainFSM+0xf0>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffa0 	bl	8000424 <buttonIncreaseValue>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <mainFSM+0xec>)
 80014ea:	701a      	strb	r2, [r3, #0]
		adjustedTemp = buttonDecreaseValue(adjustedTemp, displayChangedMaxTemp, 61);
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <mainFSM+0xec>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	223d      	movs	r2, #61	; 0x3d
 80014f2:	4929      	ldr	r1, [pc, #164]	; (8001598 <mainFSM+0xf0>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f831 	bl	800055c <buttonDecreaseValue>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <mainFSM+0xec>)
 8001500:	701a      	strb	r2, [r3, #0]
		normalRun();
 8001502:	f7ff fe71 	bl	80011e8 <normalRun>
		break;
 8001506:	e040      	b.n	800158a <mainFSM+0xe2>
	case adjustHumid:
		adjustedHumid = buttonIncreaseValue(adjustedHumid, displayChangedMaxHum, 101);
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <mainFSM+0xf4>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2265      	movs	r2, #101	; 0x65
 800150e:	4924      	ldr	r1, [pc, #144]	; (80015a0 <mainFSM+0xf8>)
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff87 	bl	8000424 <buttonIncreaseValue>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <mainFSM+0xf4>)
 800151c:	701a      	strb	r2, [r3, #0]
		adjustedHumid = buttonDecreaseValue(adjustedHumid, displayChangedMaxHum, 101);
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <mainFSM+0xf4>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2265      	movs	r2, #101	; 0x65
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <mainFSM+0xf8>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f818 	bl	800055c <buttonDecreaseValue>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <mainFSM+0xf4>)
 8001532:	701a      	strb	r2, [r3, #0]
		normalRun();
 8001534:	f7ff fe58 	bl	80011e8 <normalRun>
		break;
 8001538:	e027      	b.n	800158a <mainFSM+0xe2>
	case adjustPeriod:
		adjustedPeriod = buttonIncreaseValue(adjustedPeriod, displayChangedPeriod, 61);
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <mainFSM+0xfc>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	223d      	movs	r2, #61	; 0x3d
 8001540:	4919      	ldr	r1, [pc, #100]	; (80015a8 <mainFSM+0x100>)
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff6e 	bl	8000424 <buttonIncreaseValue>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <mainFSM+0xfc>)
 800154e:	701a      	strb	r2, [r3, #0]
		adjustedPeriod = buttonDecreaseValue(adjustedPeriod, displayChangedPeriod, 61);
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <mainFSM+0xfc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	223d      	movs	r2, #61	; 0x3d
 8001556:	4914      	ldr	r1, [pc, #80]	; (80015a8 <mainFSM+0x100>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffff 	bl	800055c <buttonDecreaseValue>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <mainFSM+0xfc>)
 8001564:	701a      	strb	r2, [r3, #0]
		normalRun();
 8001566:	f7ff fe3f 	bl	80011e8 <normalRun>
		break;
 800156a:	e00e      	b.n	800158a <mainFSM+0xe2>
	case simulation:
		decideTempOrHumid();
 800156c:	f7ff ff58 	bl	8001420 <decideTempOrHumid>
		currentChoice = buttonDecide(currentChoice, changeChoice);
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <mainFSM+0x104>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <mainFSM+0x108>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f8d4 	bl	8000724 <buttonDecide>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <mainFSM+0x104>)
 8001582:	701a      	strb	r2, [r3, #0]
		normalRun();
 8001584:	f7ff fe30 	bl	80011e8 <normalRun>
		break;
 8001588:	bf00      	nop
	}
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000009e 	.word	0x2000009e
 8001594:	200001b5 	.word	0x200001b5
 8001598:	08000f35 	.word	0x08000f35
 800159c:	200001b4 	.word	0x200001b4
 80015a0:	08000f91 	.word	0x08000f91
 80015a4:	200001ae 	.word	0x200001ae
 80015a8:	08000fed 	.word	0x08000fed
 80015ac:	2000009f 	.word	0x2000009f
 80015b0:	08001401 	.word	0x08001401

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 fd72 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f87c 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 f9b2 	bl	8001928 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015c4:	f000 f986 	bl	80018d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015c8:	f000 f8e6 	bl	8001798 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015cc:	f000 f934 	bl	8001838 <MX_TIM3_Init>
  MX_I2C1_Init();
 80015d0:	f000 f8b4 	bl	800173c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  schedulerInit();
 80015d4:	f000 fa88 	bl	8001ae8 <schedulerInit>
  HAL_TIM_Base_Start(&htim1);
 80015d8:	482c      	ldr	r0, [pc, #176]	; (800168c <main+0xd8>)
 80015da:	f002 f9b5 	bl	8003948 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80015de:	482c      	ldr	r0, [pc, #176]	; (8001690 <main+0xdc>)
 80015e0:	f002 f9fc 	bl	80039dc <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_IT(&huart2, data, sizeof(data));

  insertTaskFirstTime(getTempAndHumid, 120, 200);
 80015e4:	22c8      	movs	r2, #200	; 0xc8
 80015e6:	2178      	movs	r1, #120	; 0x78
 80015e8:	482a      	ldr	r0, [pc, #168]	; (8001694 <main+0xe0>)
 80015ea:	f000 fa8f 	bl	8001b0c <insertTaskFirstTime>
  insertTaskFirstTime(heator, 125, period*ONE_SECOND);
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <main+0xe4>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	2364      	movs	r3, #100	; 0x64
 80015f6:	fb03 f302 	mul.w	r3, r3, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	217d      	movs	r1, #125	; 0x7d
 80015fe:	4827      	ldr	r0, [pc, #156]	; (800169c <main+0xe8>)
 8001600:	f000 fa84 	bl	8001b0c <insertTaskFirstTime>
  insertTaskFirstTime(heatpump, 125+period*ONE_SECOND, period*ONE_SECOND);
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <main+0xe4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	2364      	movs	r3, #100	; 0x64
 800160c:	fb03 f302 	mul.w	r3, r3, r2
 8001610:	337d      	adds	r3, #125	; 0x7d
 8001612:	4619      	mov	r1, r3
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <main+0xe4>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	fb03 f302 	mul.w	r3, r3, r2
 8001620:	461a      	mov	r2, r3
 8001622:	481f      	ldr	r0, [pc, #124]	; (80016a0 <main+0xec>)
 8001624:	f000 fa72 	bl	8001b0c <insertTaskFirstTime>

  lcd_init();
 8001628:	f7ff fb76 	bl	8000d18 <lcd_init>
  lcd_put_cur(0, 5);
 800162c:	2105      	movs	r1, #5
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff fb54 	bl	8000cdc <lcd_put_cur>
  lcd_send_string("LAB 5");
 8001634:	481b      	ldr	r0, [pc, #108]	; (80016a4 <main+0xf0>)
 8001636:	f7ff fbac 	bl	8000d92 <lcd_send_string>
  HAL_Delay(1000);
 800163a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163e:	f000 fd91 	bl	8002164 <HAL_Delay>
  prepareLCD();
 8001642:	f7ff fbbb 	bl	8000dbc <prepareLCD>
  displayMode(currentMode);
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <main+0xf4>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fd58 	bl	8001100 <displayMode>
  displayChangedMaxTemp(maxTemp);
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <main+0xf8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fc6d 	bl	8000f34 <displayChangedMaxTemp>
  displayChangedMaxHum(maxHumid);
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <main+0xfc>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fc96 	bl	8000f90 <displayChangedMaxHum>
  displayChangedPeriod(period);
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <main+0xe4>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fcbf 	bl	8000fec <displayChangedPeriod>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainFSM();
 800166e:	f7ff ff1b 	bl	80014a8 <mainFSM>
	  if (globalTimeout == HAL_TIMEOUT) {
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <main+0x100>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d1f9      	bne.n	800166e <main+0xba>
		  displayTimeout();
 800167a:	f7ff fd59 	bl	8001130 <displayTimeout>
		  deleteAllTask();
 800167e:	f000 fb71 	bl	8001d64 <deleteAllTask>
		  break;
 8001682:	bf00      	nop
 8001684:	2300      	movs	r3, #0
	  }
	  //globalTimeout = HAL_OK;
  }
  /* USER CODE END 3 */
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000b4 	.word	0x200000b4
 8001690:	20000158 	.word	0x20000158
 8001694:	08000e45 	.word	0x08000e45
 8001698:	20000002 	.word	0x20000002
 800169c:	08001161 	.word	0x08001161
 80016a0:	080011a5 	.word	0x080011a5
 80016a4:	08004990 	.word	0x08004990
 80016a8:	2000009e 	.word	0x2000009e
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000001 	.word	0x20000001
 80016b4:	200000a0 	.word	0x200000a0

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	2228      	movs	r2, #40	; 0x28
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 f866 	bl	8004798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016de:	2301      	movs	r3, #1
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e2:	2310      	movs	r3, #16
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016ea:	2300      	movs	r3, #0
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80016f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 fcb9 	bl	8003070 <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001704:	f000 f9ea 	bl	8001adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2102      	movs	r1, #2
 8001722:	4618      	mov	r0, r3
 8001724:	f001 ff24 	bl	8003570 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800172e:	f000 f9d5 	bl	8001adc <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3740      	adds	r7, #64	; 0x40
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C1_Init+0x50>)
 800177a:	f001 f83b 	bl	80027f4 <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 f9aa 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000104 	.word	0x20000104
 8001790:	40005400 	.word	0x40005400
 8001794:	000186a0 	.word	0x000186a0

08001798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <MX_TIM1_Init+0x98>)
 80017b6:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <MX_TIM1_Init+0x9c>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <MX_TIM1_Init+0x98>)
 80017bc:	223f      	movs	r2, #63	; 0x3f
 80017be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <MX_TIM1_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_TIM1_Init+0x98>)
 80017c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_TIM1_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_TIM1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_TIM1_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <MX_TIM1_Init+0x98>)
 80017e2:	f002 f861 	bl	80038a8 <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80017ec:	f000 f976 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4619      	mov	r1, r3
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <MX_TIM1_Init+0x98>)
 80017fe:	f002 fa47 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001808:	f000 f968 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_TIM1_Init+0x98>)
 800181a:	f002 fc0d 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001824:	f000 f95a 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200000b4 	.word	0x200000b4
 8001834:	40012c00 	.word	0x40012c00

08001838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM3_Init+0x94>)
 8001856:	4a1e      	ldr	r2, [pc, #120]	; (80018d0 <MX_TIM3_Init+0x98>)
 8001858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_TIM3_Init+0x94>)
 800185c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8001860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM3_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM3_Init+0x94>)
 800186a:	2263      	movs	r2, #99	; 0x63
 800186c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_TIM3_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM3_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187a:	4814      	ldr	r0, [pc, #80]	; (80018cc <MX_TIM3_Init+0x94>)
 800187c:	f002 f814 	bl	80038a8 <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001886:	f000 f929 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_TIM3_Init+0x94>)
 8001898:	f002 f9fa 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f91b 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ae:	463b      	mov	r3, r7
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <MX_TIM3_Init+0x94>)
 80018b4:	f002 fbc0 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018be:	f000 f90d 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000158 	.word	0x20000158
 80018d0:	40000400 	.word	0x40000400

080018d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART2_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART2_UART_Init+0x4c>)
 800190c:	f002 fc04 	bl	8004118 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f000 f8e1 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200001b8 	.word	0x200001b8
 8001924:	40004400 	.word	0x40004400

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <MX_GPIO_Init+0x144>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a4a      	ldr	r2, [pc, #296]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <MX_GPIO_Init+0x144>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <MX_GPIO_Init+0x144>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <MX_GPIO_Init+0x144>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a3e      	ldr	r2, [pc, #248]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <MX_GPIO_Init+0x144>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a38      	ldr	r2, [pc, #224]	; (8001a6c <MX_GPIO_Init+0x144>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <MX_GPIO_Init+0x144>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80019a2:	4833      	ldr	r0, [pc, #204]	; (8001a70 <MX_GPIO_Init+0x148>)
 80019a4:	f000 fef5 	bl	8002792 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2160      	movs	r1, #96	; 0x60
 80019ac:	4831      	ldr	r0, [pc, #196]	; (8001a74 <MX_GPIO_Init+0x14c>)
 80019ae:	f000 fef0 	bl	8002792 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f241 0104 	movw	r1, #4100	; 0x1004
 80019b8:	482f      	ldr	r0, [pc, #188]	; (8001a78 <MX_GPIO_Init+0x150>)
 80019ba:	f000 feea 	bl	8002792 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <MX_GPIO_Init+0x154>)
 80019c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4828      	ldr	r0, [pc, #160]	; (8001a74 <MX_GPIO_Init+0x14c>)
 80019d4:	f000 fd6c 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80019d8:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	481f      	ldr	r0, [pc, #124]	; (8001a70 <MX_GPIO_Init+0x148>)
 80019f2:	f000 fd5d 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019f6:	2360      	movs	r3, #96	; 0x60
 80019f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4819      	ldr	r0, [pc, #100]	; (8001a74 <MX_GPIO_Init+0x14c>)
 8001a0e:	f000 fd4f 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8001a12:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_GPIO_Init+0x150>)
 8001a2c:	f000 fd40 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_8;
 8001a30:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_GPIO_Init+0x150>)
 8001a46:	f000 fd33 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_GPIO_Init+0x14c>)
 8001a60:	f000 fd26 	bl	80024b0 <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010800 	.word	0x40010800
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	10110000 	.word	0x10110000

08001a80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
//	if (huart->Instance == huart2.Instance) {
//		HAL_UART_Receive_IT(&huart2, data, sizeof(data));
//	}
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if ((htim == &htim3)) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d113      	bne.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x38>
		readIncreaseButton();
 8001aa4:	f7fe fc78 	bl	8000398 <readIncreaseButton>
		readDecreaseButton();
 8001aa8:	f7fe fd0a 	bl	80004c0 <readDecreaseButton>
		readModeButton();
 8001aac:	f7fe fdb4 	bl	8000618 <readModeButton>
		readDecideButton();
 8001ab0:	f7fe fe10 	bl	80006d4 <readDecideButton>
		if (getPowerFan1()) runFan1(result.humidity[0]);
 8001ab4:	f7fe fea2 	bl	80007fc <getPowerFan1>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x34>
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fea4 	bl	8000810 <runFan1>
		updateTask();
 8001ac8:	f000 f928 	bl	8001d1c <updateTask>
	}
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000158 	.word	0x20000158
 8001ad8:	200001b0 	.word	0x200001b0

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <schedulerInit>:
#include "stdlib.h"
#include "scheduler.h"

node *head = NULL;

void schedulerInit(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	head = (node *)malloc(sizeof(node));
 8001aec:	2018      	movs	r0, #24
 8001aee:	f002 fe43 	bl	8004778 <malloc>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <schedulerInit+0x20>)
 8001af8:	601a      	str	r2, [r3, #0]
	head->next = NULL;
 8001afa:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <schedulerInit+0x20>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200000a4 	.word	0x200000a4

08001b0c <insertTaskFirstTime>:

void insertTaskFirstTime(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	node *tmp = head;
 8001b18:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <insertTaskFirstTime+0xc0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61fb      	str	r3, [r7, #28]
	int totalTime = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]

	while ((tmp->next) && (totalTime+tmp->next->delay < DELAY)) {
 8001b22:	e008      	b.n	8001b36 <insertTaskFirstTime+0x2a>
		totalTime += tmp->next->delay;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
	    tmp = tmp->next;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	61fb      	str	r3, [r7, #28]
	while ((tmp->next) && (totalTime+tmp->next->delay < DELAY)) {
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <insertTaskFirstTime+0x42>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	4413      	add	r3, r2
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d8ea      	bhi.n	8001b24 <insertTaskFirstTime+0x18>
	}

	node *newNode = (node *)malloc(sizeof(node));
 8001b4e:	2018      	movs	r0, #24
 8001b50:	f002 fe12 	bl	8004778 <malloc>
 8001b54:	4603      	mov	r3, r0
 8001b56:	617b      	str	r3, [r7, #20]

	newNode->pTask = pFunction;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	601a      	str	r2, [r3, #0]
	newNode->delay = DELAY - totalTime;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	605a      	str	r2, [r3, #4]
	newNode->period = PERIOD;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
	if (newNode->delay) newNode->runMe = 0;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <insertTaskFirstTime+0x72>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	741a      	strb	r2, [r3, #16]
 8001b7c:	e002      	b.n	8001b84 <insertTaskFirstTime+0x78>
	else newNode->runMe = 1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2201      	movs	r2, #1
 8001b82:	741a      	strb	r2, [r3, #16]

	newNode->next = tmp->next;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	615a      	str	r2, [r3, #20]
	tmp->next = newNode;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	615a      	str	r2, [r3, #20]

	if (newNode->next) {
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d013      	beq.n	8001bc2 <insertTaskFirstTime+0xb6>
		newNode->next->delay -= newNode->delay;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	1a8a      	subs	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]
		newNode->next->runMe = !newNode->next->delay;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	741a      	strb	r2, [r3, #16]
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200000a4 	.word	0x200000a4

08001bd0 <insertTaskBack>:

void insertTaskBack(void (* pFunction)(), uint32_t PERIOD) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
	node *tmp = head;
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <insertTaskBack+0xbc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	617b      	str	r3, [r7, #20]
	int totalTime = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]

	while ((tmp->next) && (totalTime+tmp->next->delay < PERIOD)) {
 8001be4:	e008      	b.n	8001bf8 <insertTaskBack+0x28>
		totalTime += tmp->next->delay;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
		tmp = tmp->next;
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	617b      	str	r3, [r7, #20]
	while ((tmp->next) && (totalTime+tmp->next->delay < PERIOD)) {
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <insertTaskBack+0x40>
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d8ea      	bhi.n	8001be6 <insertTaskBack+0x16>
	}

	node *newNode = (node *)malloc(sizeof(node));
 8001c10:	2018      	movs	r0, #24
 8001c12:	f002 fdb1 	bl	8004778 <malloc>
 8001c16:	4603      	mov	r3, r0
 8001c18:	60fb      	str	r3, [r7, #12]

	newNode->pTask = pFunction;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]
	newNode->delay = PERIOD - totalTime;
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	1ad2      	subs	r2, r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	605a      	str	r2, [r3, #4]
	newNode->period = PERIOD;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	609a      	str	r2, [r3, #8]
	newNode->runMe = !newNode->delay;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	741a      	strb	r2, [r3, #16]

	newNode->next = tmp->next;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	615a      	str	r2, [r3, #20]
	tmp->next = newNode;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	615a      	str	r2, [r3, #20]

	if (newNode->next) {
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d013      	beq.n	8001c82 <insertTaskBack+0xb2>
		newNode->next->delay -= newNode->delay;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	1a8a      	subs	r2, r1, r2
 8001c6a:	605a      	str	r2, [r3, #4]
		newNode->next->runMe = !newNode->next->delay;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	741a      	strb	r2, [r3, #16]
	}
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000a4 	.word	0x200000a4

08001c90 <deleteFirstNode>:

void deleteFirstNode(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	node *deleteNode = head->next;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <deleteFirstNode+0x2c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	607b      	str	r3, [r7, #4]
	node *savedNode = deleteNode->next;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	603b      	str	r3, [r7, #0]
	head->next = savedNode;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <deleteFirstNode+0x2c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	615a      	str	r2, [r3, #20]
	free(deleteNode);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f002 fd6b 	bl	8004788 <free>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200000a4 	.word	0x200000a4

08001cc0 <dispatchTask>:

void dispatchTask(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
	void (*task)(void);
	uint32_t savedPeriod;
	while (head->next && head->next->runMe) {
 8001cc6:	e017      	b.n	8001cf8 <dispatchTask+0x38>
		(*head->next->pTask)();
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <dispatchTask+0x58>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4798      	blx	r3
		task = head->next->pTask;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <dispatchTask+0x58>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	607b      	str	r3, [r7, #4]
		savedPeriod = head->next->period;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <dispatchTask+0x58>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	603b      	str	r3, [r7, #0]
		//savedDelay = head->next->delay;
		deleteFirstNode();
 8001ce6:	f7ff ffd3 	bl	8001c90 <deleteFirstNode>
		if (savedPeriod) {
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <dispatchTask+0x38>
			insertTaskBack(task, savedPeriod);
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ff6c 	bl	8001bd0 <insertTaskBack>
	while (head->next && head->next->runMe) {
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <dispatchTask+0x58>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <dispatchTask+0x4e>
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <dispatchTask+0x58>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	7c1b      	ldrb	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1dc      	bne.n	8001cc8 <dispatchTask+0x8>
		}
	}
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200000a4 	.word	0x200000a4

08001d1c <updateTask>:

void updateTask(void) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	if (head->next) {
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <updateTask+0x44>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <updateTask+0x3a>
		head->next->delay -= 1;
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <updateTask+0x44>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <updateTask+0x44>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	605a      	str	r2, [r3, #4]
		head->next->runMe = !(head->next->delay);
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <updateTask+0x44>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <updateTask+0x44>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	741a      	strb	r2, [r3, #16]
	}
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	200000a4 	.word	0x200000a4

08001d64 <deleteAllTask>:

void deleteAllTask(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	while (head->next) deleteFirstNode();
 8001d68:	e001      	b.n	8001d6e <deleteAllTask+0xa>
 8001d6a:	f7ff ff91 	bl	8001c90 <deleteFirstNode>
 8001d6e:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <deleteAllTask+0x18>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f8      	bne.n	8001d6a <deleteAllTask+0x6>
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200000a4 	.word	0x200000a4

08001d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_MspInit+0x5c>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_MspInit+0x5c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6193      	str	r3, [r2, #24]
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_MspInit+0x5c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <HAL_MspInit+0x5c>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_MspInit+0x5c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <HAL_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_MspInit+0x60>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <HAL_MspInit+0x60>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_I2C_MspInit+0x70>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d123      	bne.n	8001e4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_I2C_MspInit+0x74>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_I2C_MspInit+0x74>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_I2C_MspInit+0x74>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1c:	23c0      	movs	r3, #192	; 0xc0
 8001e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e20:	2312      	movs	r3, #18
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_I2C_MspInit+0x78>)
 8001e30:	f000 fb3e 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_I2C_MspInit+0x74>)
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_I2C_MspInit+0x74>)
 8001e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e3e:	61d3      	str	r3, [r2, #28]
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_I2C_MspInit+0x74>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40005400 	.word	0x40005400
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010c00 	.word	0x40010c00

08001e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_TIM_Base_MspInit+0x68>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10c      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e8a:	e018      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_TIM_Base_MspInit+0x70>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d113      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_TIM_Base_MspInit+0x6c>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	201d      	movs	r0, #29
 8001eb4:	f000 fa4f 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eb8:	201d      	movs	r0, #29
 8001eba:	f000 fa68 	bl	800238e <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40000400 	.word	0x40000400

08001ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_UART_MspInit+0x80>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12b      	bne.n	8001f4c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspInit+0x84>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_UART_MspInit+0x84>)
 8001efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efe:	61d3      	str	r3, [r2, #28]
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0x84>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_UART_MspInit+0x84>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_UART_MspInit+0x84>)
 8001f12:	f043 0304 	orr.w	r3, r3, #4
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_UART_MspInit+0x84>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f24:	230c      	movs	r3, #12
 8001f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4619      	mov	r1, r3
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_UART_MspInit+0x88>)
 8001f38:	f000 faba 	bl	80024b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2026      	movs	r0, #38	; 0x26
 8001f42:	f000 fa08 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f46:	2026      	movs	r0, #38	; 0x26
 8001f48:	f000 fa21 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010800 	.word	0x40010800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <HardFault_Handler+0x4>

08001f72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <MemManage_Handler+0x4>

08001f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <BusFault_Handler+0x4>

08001f7e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <UsageFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 f8be 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM3_IRQHandler+0x10>)
 8001fba:	f001 fd61 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000158 	.word	0x20000158

08001fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <USART2_IRQHandler+0x10>)
 8001fce:	f002 f8f1 	bl	80041b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200001b8 	.word	0x200001b8

08001fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d207      	bcs.n	800201c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800200c:	f002 fb8a 	bl	8004724 <__errno>
 8002010:	4602      	mov	r2, r0
 8002012:	230c      	movs	r3, #12
 8002014:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e009      	b.n	8002030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <_sbrk+0x64>)
 800202c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20005000 	.word	0x20005000
 800203c:	00000400 	.word	0x00000400
 8002040:	200000a8 	.word	0x200000a8
 8002044:	20000208 	.word	0x20000208

08002048 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002054:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002056:	e003      	b.n	8002060 <LoopCopyDataInit>

08002058 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800205a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800205c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800205e:	3104      	adds	r1, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002064:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002066:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002068:	d3f6      	bcc.n	8002058 <CopyDataInit>
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800206c:	e002      	b.n	8002074 <LoopFillZerobss>

0800206e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002070:	f842 3b04 	str.w	r3, [r2], #4

08002074 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002076:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002078:	d3f9      	bcc.n	800206e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800207a:	f7ff ffe5 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f002 fb57 	bl	8004730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002082:	f7ff fa97 	bl	80015b4 <main>
  bx lr
 8002086:	4770      	bx	lr
  ldr r3, =_sidata
 8002088:	080049cc 	.word	0x080049cc
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002090:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002094:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002098:	20000204 	.word	0x20000204

0800209c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x28>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x28>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 f945 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fe60 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f95d 	bl	80023aa <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 f925 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000004 	.word	0x20000004
 8002124:	2000000c 	.word	0x2000000c
 8002128:	20000008 	.word	0x20000008

0800212c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x1c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_IncTick+0x20>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <HAL_IncTick+0x20>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	2000000c 	.word	0x2000000c
 800214c:	200001fc 	.word	0x200001fc

08002150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <HAL_GetTick+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	200001fc 	.word	0x200001fc

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff fff0 	bl	8002150 <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_Delay+0x40>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffe0 	bl	8002150 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021c4:	4013      	ands	r3, r2
 80021c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021da:	4a04      	ldr	r2, [pc, #16]	; (80021ec <__NVIC_SetPriorityGrouping+0x44>)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <__NVIC_GetPriorityGrouping+0x18>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	f003 0307 	and.w	r3, r3, #7
}
 80021fe:	4618      	mov	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0b      	blt.n	8002236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4906      	ldr	r1, [pc, #24]	; (8002240 <__NVIC_EnableIRQ+0x34>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100

08002244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	6039      	str	r1, [r7, #0]
 800224e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	db0a      	blt.n	800226e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2da      	uxtb	r2, r3
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <__NVIC_SetPriority+0x4c>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	440b      	add	r3, r1
 8002268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800226c:	e00a      	b.n	8002284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4908      	ldr	r1, [pc, #32]	; (8002294 <__NVIC_SetPriority+0x50>)
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	3b04      	subs	r3, #4
 800227c:	0112      	lsls	r2, r2, #4
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	440b      	add	r3, r1
 8002282:	761a      	strb	r2, [r3, #24]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f1c3 0307 	rsb	r3, r3, #7
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	bf28      	it	cs
 80022b6:	2304      	movcs	r3, #4
 80022b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3304      	adds	r3, #4
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <NVIC_EncodePriority+0x30>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3b03      	subs	r3, #3
 80022c6:	e000      	b.n	80022ca <NVIC_EncodePriority+0x32>
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	f04f 32ff 	mov.w	r2, #4294967295
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	401a      	ands	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	43d9      	mvns	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	4313      	orrs	r3, r2
         );
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff90 	bl	8002244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff2d 	bl	80021a8 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff42 	bl	80021f0 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff90 	bl	8002298 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5f 	bl	8002244 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff35 	bl	800220c <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d005      	beq.n	80023e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2204      	movs	r2, #4
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	e051      	b.n	800248a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 020e 	bic.w	r2, r2, #14
 80023f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_DMA_Abort_IT+0xd0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d029      	beq.n	8002464 <HAL_DMA_Abort_IT+0xa0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_DMA_Abort_IT+0xd4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d022      	beq.n	8002460 <HAL_DMA_Abort_IT+0x9c>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_DMA_Abort_IT+0xd8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d01a      	beq.n	800245a <HAL_DMA_Abort_IT+0x96>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_DMA_Abort_IT+0xdc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d012      	beq.n	8002454 <HAL_DMA_Abort_IT+0x90>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_DMA_Abort_IT+0xe0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00a      	beq.n	800244e <HAL_DMA_Abort_IT+0x8a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_DMA_Abort_IT+0xe4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d102      	bne.n	8002448 <HAL_DMA_Abort_IT+0x84>
 8002442:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002446:	e00e      	b.n	8002466 <HAL_DMA_Abort_IT+0xa2>
 8002448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800244c:	e00b      	b.n	8002466 <HAL_DMA_Abort_IT+0xa2>
 800244e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002452:	e008      	b.n	8002466 <HAL_DMA_Abort_IT+0xa2>
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	e005      	b.n	8002466 <HAL_DMA_Abort_IT+0xa2>
 800245a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245e:	e002      	b.n	8002466 <HAL_DMA_Abort_IT+0xa2>
 8002460:	2310      	movs	r3, #16
 8002462:	e000      	b.n	8002466 <HAL_DMA_Abort_IT+0xa2>
 8002464:	2301      	movs	r3, #1
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_DMA_Abort_IT+0xe8>)
 8002468:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
    } 
  }
  return status;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40020008 	.word	0x40020008
 8002498:	4002001c 	.word	0x4002001c
 800249c:	40020030 	.word	0x40020030
 80024a0:	40020044 	.word	0x40020044
 80024a4:	40020058 	.word	0x40020058
 80024a8:	4002006c 	.word	0x4002006c
 80024ac:	40020000 	.word	0x40020000

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b08b      	sub	sp, #44	; 0x2c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e127      	b.n	8002714 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024c4:	2201      	movs	r2, #1
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69fa      	ldr	r2, [r7, #28]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f040 8116 	bne.w	800270e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d034      	beq.n	8002554 <HAL_GPIO_Init+0xa4>
 80024ea:	2b12      	cmp	r3, #18
 80024ec:	d80d      	bhi.n	800250a <HAL_GPIO_Init+0x5a>
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d02b      	beq.n	800254a <HAL_GPIO_Init+0x9a>
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d804      	bhi.n	8002500 <HAL_GPIO_Init+0x50>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d031      	beq.n	800255e <HAL_GPIO_Init+0xae>
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d01c      	beq.n	8002538 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024fe:	e048      	b.n	8002592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002500:	2b03      	cmp	r3, #3
 8002502:	d043      	beq.n	800258c <HAL_GPIO_Init+0xdc>
 8002504:	2b11      	cmp	r3, #17
 8002506:	d01b      	beq.n	8002540 <HAL_GPIO_Init+0x90>
          break;
 8002508:	e043      	b.n	8002592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800250a:	4a89      	ldr	r2, [pc, #548]	; (8002730 <HAL_GPIO_Init+0x280>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d026      	beq.n	800255e <HAL_GPIO_Init+0xae>
 8002510:	4a87      	ldr	r2, [pc, #540]	; (8002730 <HAL_GPIO_Init+0x280>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d806      	bhi.n	8002524 <HAL_GPIO_Init+0x74>
 8002516:	4a87      	ldr	r2, [pc, #540]	; (8002734 <HAL_GPIO_Init+0x284>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d020      	beq.n	800255e <HAL_GPIO_Init+0xae>
 800251c:	4a86      	ldr	r2, [pc, #536]	; (8002738 <HAL_GPIO_Init+0x288>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_GPIO_Init+0xae>
          break;
 8002522:	e036      	b.n	8002592 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002524:	4a85      	ldr	r2, [pc, #532]	; (800273c <HAL_GPIO_Init+0x28c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0xae>
 800252a:	4a85      	ldr	r2, [pc, #532]	; (8002740 <HAL_GPIO_Init+0x290>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d016      	beq.n	800255e <HAL_GPIO_Init+0xae>
 8002530:	4a84      	ldr	r2, [pc, #528]	; (8002744 <HAL_GPIO_Init+0x294>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0xae>
          break;
 8002536:	e02c      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	623b      	str	r3, [r7, #32]
          break;
 800253e:	e028      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	3304      	adds	r3, #4
 8002546:	623b      	str	r3, [r7, #32]
          break;
 8002548:	e023      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	3308      	adds	r3, #8
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e01e      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	330c      	adds	r3, #12
 800255a:	623b      	str	r3, [r7, #32]
          break;
 800255c:	e019      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002566:	2304      	movs	r3, #4
 8002568:	623b      	str	r3, [r7, #32]
          break;
 800256a:	e012      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002574:	2308      	movs	r3, #8
 8002576:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	611a      	str	r2, [r3, #16]
          break;
 800257e:	e008      	b.n	8002592 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002580:	2308      	movs	r3, #8
 8002582:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	615a      	str	r2, [r3, #20]
          break;
 800258a:	e002      	b.n	8002592 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2bff      	cmp	r3, #255	; 0xff
 8002596:	d801      	bhi.n	800259c <HAL_GPIO_Init+0xec>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	e001      	b.n	80025a0 <HAL_GPIO_Init+0xf0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2bff      	cmp	r3, #255	; 0xff
 80025a6:	d802      	bhi.n	80025ae <HAL_GPIO_Init+0xfe>
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_Init+0x104>
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	3b08      	subs	r3, #8
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	210f      	movs	r1, #15
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	6a39      	ldr	r1, [r7, #32]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	431a      	orrs	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8096 	beq.w	800270e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025e2:	4b59      	ldr	r3, [pc, #356]	; (8002748 <HAL_GPIO_Init+0x298>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a58      	ldr	r2, [pc, #352]	; (8002748 <HAL_GPIO_Init+0x298>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6193      	str	r3, [r2, #24]
 80025ee:	4b56      	ldr	r3, [pc, #344]	; (8002748 <HAL_GPIO_Init+0x298>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025fa:	4a54      	ldr	r2, [pc, #336]	; (800274c <HAL_GPIO_Init+0x29c>)
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4b      	ldr	r2, [pc, #300]	; (8002750 <HAL_GPIO_Init+0x2a0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x19e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_GPIO_Init+0x2a4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x19a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2a8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x196>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2ac>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x192>
 800263e:	2303      	movs	r3, #3
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x1a0>
 8002642:	2304      	movs	r3, #4
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x1a0>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x1a0>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x1a0>
 800264e:	2300      	movs	r3, #0
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002660:	493a      	ldr	r1, [pc, #232]	; (800274c <HAL_GPIO_Init+0x29c>)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4938      	ldr	r1, [pc, #224]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	e006      	b.n	8002696 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	43db      	mvns	r3, r3
 8002690:	4933      	ldr	r1, [pc, #204]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 8002692:	4013      	ands	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	492e      	ldr	r1, [pc, #184]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4929      	ldr	r1, [pc, #164]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026ca:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	4924      	ldr	r1, [pc, #144]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	43db      	mvns	r3, r3
 80026e0:	491f      	ldr	r1, [pc, #124]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	491a      	ldr	r1, [pc, #104]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60cb      	str	r3, [r1, #12]
 80026fe:	e006      	b.n	800270e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	43db      	mvns	r3, r3
 8002708:	4915      	ldr	r1, [pc, #84]	; (8002760 <HAL_GPIO_Init+0x2b0>)
 800270a:	4013      	ands	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	3301      	adds	r3, #1
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f47f aed0 	bne.w	80024c4 <HAL_GPIO_Init+0x14>
  }
}
 8002724:	bf00      	nop
 8002726:	372c      	adds	r7, #44	; 0x2c
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	10210000 	.word	0x10210000
 8002734:	10110000 	.word	0x10110000
 8002738:	10120000 	.word	0x10120000
 800273c:	10310000 	.word	0x10310000
 8002740:	10320000 	.word	0x10320000
 8002744:	10220000 	.word	0x10220000
 8002748:	40021000 	.word	0x40021000
 800274c:	40010000 	.word	0x40010000
 8002750:	40010800 	.word	0x40010800
 8002754:	40010c00 	.word	0x40010c00
 8002758:	40011000 	.word	0x40011000
 800275c:	40011400 	.word	0x40011400
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e001      	b.n	8002786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	807b      	strh	r3, [r7, #2]
 800279e:	4613      	mov	r3, r2
 80027a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a2:	787b      	ldrb	r3, [r7, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ae:	e003      	b.n	80027b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	041a      	lsls	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	611a      	str	r2, [r3, #16]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d4:	887a      	ldrh	r2, [r7, #2]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4013      	ands	r3, r2
 80027da:	041a      	lsls	r2, r3, #16
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43d9      	mvns	r1, r3
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	400b      	ands	r3, r1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e11f      	b.n	8002a46 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fae2 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002858:	f000 ffe0 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800285c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a7b      	ldr	r2, [pc, #492]	; (8002a50 <HAL_I2C_Init+0x25c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d807      	bhi.n	8002878 <HAL_I2C_Init+0x84>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a7a      	ldr	r2, [pc, #488]	; (8002a54 <HAL_I2C_Init+0x260>)
 800286c:	4293      	cmp	r3, r2
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e006      	b.n	8002886 <HAL_I2C_Init+0x92>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a77      	ldr	r2, [pc, #476]	; (8002a58 <HAL_I2C_Init+0x264>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0db      	b.n	8002a46 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a72      	ldr	r2, [pc, #456]	; (8002a5c <HAL_I2C_Init+0x268>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9b      	lsrs	r3, r3, #18
 8002898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a64      	ldr	r2, [pc, #400]	; (8002a50 <HAL_I2C_Init+0x25c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d802      	bhi.n	80028c8 <HAL_I2C_Init+0xd4>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	e009      	b.n	80028dc <HAL_I2C_Init+0xe8>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_I2C_Init+0x26c>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	3301      	adds	r3, #1
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4956      	ldr	r1, [pc, #344]	; (8002a50 <HAL_I2C_Init+0x25c>)
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d80d      	bhi.n	8002918 <HAL_I2C_Init+0x124>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e59      	subs	r1, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fbb1 f3f3 	udiv	r3, r1, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b04      	cmp	r3, #4
 8002912:	bf38      	it	cc
 8002914:	2304      	movcc	r3, #4
 8002916:	e04f      	b.n	80029b8 <HAL_I2C_Init+0x1c4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d111      	bne.n	8002944 <HAL_I2C_Init+0x150>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e012      	b.n	800296a <HAL_I2C_Init+0x176>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1e58      	subs	r0, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	0099      	lsls	r1, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x17e>
 800296e:	2301      	movs	r3, #1
 8002970:	e022      	b.n	80029b8 <HAL_I2C_Init+0x1c4>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <HAL_I2C_Init+0x1a4>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1e58      	subs	r0, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	460b      	mov	r3, r1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	440b      	add	r3, r1
 8002988:	fbb0 f3f3 	udiv	r3, r0, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002996:	e00f      	b.n	80029b8 <HAL_I2C_Init+0x1c4>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6809      	ldr	r1, [r1, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6911      	ldr	r1, [r2, #16]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	000186a0 	.word	0x000186a0
 8002a54:	001e847f 	.word	0x001e847f
 8002a58:	003d08ff 	.word	0x003d08ff
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	10624dd3 	.word	0x10624dd3

08002a64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	460b      	mov	r3, r1
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	4613      	mov	r3, r2
 8002a76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff fb6a 	bl	8002150 <HAL_GetTick>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 80e0 	bne.w	8002c4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	4970      	ldr	r1, [pc, #448]	; (8002c58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f964 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0d3      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_I2C_Master_Transmit+0x50>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e0cc      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d007      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2221      	movs	r2, #33	; 0x21
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2210      	movs	r2, #16
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	893a      	ldrh	r2, [r7, #8]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a50      	ldr	r2, [pc, #320]	; (8002c5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f89c 	bl	8002c60 <I2C_MasterRequestWrite>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e08d      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b48:	e066      	b.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f9de 	bl	8002f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e06b      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d11b      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x188>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d017      	beq.n	8002bec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	6a39      	ldr	r1, [r7, #32]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f9ce 	bl	8002f92 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e01a      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d194      	bne.n	8002b4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000

08002c60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d006      	beq.n	8002c8a <I2C_MasterRequestWrite+0x2a>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d003      	beq.n	8002c8a <I2C_MasterRequestWrite+0x2a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e00b      	b.n	8002cb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d107      	bne.n	8002cb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f84f 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e035      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e01b      	b.n	8002d3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	11db      	asrs	r3, r3, #7
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f063 030f 	orn	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	490e      	ldr	r1, [pc, #56]	; (8002d5c <I2C_MasterRequestWrite+0xfc>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f875 	bl	8002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e010      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <I2C_MasterRequestWrite+0x100>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f865 	bl	8002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	00010008 	.word	0x00010008
 8002d60:	00010002 	.word	0x00010002

08002d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d74:	e025      	b.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d021      	beq.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff f9e7 	bl	8002150 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e023      	b.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	e00c      	b.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d0b6      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e20:	e051      	b.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e30:	d123      	bne.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f043 0204 	orr.w	r2, r3, #4
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e046      	b.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d021      	beq.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7ff f965 	bl	8002150 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d116      	bne.n	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e020      	b.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10c      	bne.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4013      	ands	r3, r2
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	e00b      	b.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d18d      	bne.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1c:	e02d      	b.n	8002f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f878 	bl	8003014 <I2C_IsAcknowledgeFailed>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e02d      	b.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d021      	beq.n	8002f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff f90b 	bl	8002150 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e007      	b.n	8002f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d1ca      	bne.n	8002f1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f9e:	e02d      	b.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f837 	bl	8003014 <I2C_IsAcknowledgeFailed>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e02d      	b.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d021      	beq.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb8:	f7ff f8ca 	bl	8002150 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d302      	bcc.n	8002fce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e007      	b.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b04      	cmp	r3, #4
 8003008:	d1ca      	bne.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302a:	d11b      	bne.n	8003064 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003034:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0204 	orr.w	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e26c      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8087 	beq.w	800319e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003090:	4b92      	ldr	r3, [pc, #584]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b04      	cmp	r3, #4
 800309a:	d00c      	beq.n	80030b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800309c:	4b8f      	ldr	r3, [pc, #572]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d112      	bne.n	80030ce <HAL_RCC_OscConfig+0x5e>
 80030a8:	4b8c      	ldr	r3, [pc, #560]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d10b      	bne.n	80030ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b6:	4b89      	ldr	r3, [pc, #548]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d06c      	beq.n	800319c <HAL_RCC_OscConfig+0x12c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d168      	bne.n	800319c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e246      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x76>
 80030d8:	4b80      	ldr	r3, [pc, #512]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a7f      	ldr	r2, [pc, #508]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e02e      	b.n	8003144 <HAL_RCC_OscConfig+0xd4>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x98>
 80030ee:	4b7b      	ldr	r3, [pc, #492]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a7a      	ldr	r2, [pc, #488]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b78      	ldr	r3, [pc, #480]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a77      	ldr	r2, [pc, #476]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e01d      	b.n	8003144 <HAL_RCC_OscConfig+0xd4>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0xbc>
 8003112:	4b72      	ldr	r3, [pc, #456]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a71      	ldr	r2, [pc, #452]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0xd4>
 800312c:	4b6b      	ldr	r3, [pc, #428]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a6a      	ldr	r2, [pc, #424]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b68      	ldr	r3, [pc, #416]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a67      	ldr	r2, [pc, #412]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7ff f800 	bl	8002150 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fe fffc 	bl	8002150 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	; 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e1fa      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0xe4>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe ffec 	bl	8002150 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe ffe8 	bl	8002150 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1e6      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x10c>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d063      	beq.n	8003272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031aa:	4b4c      	ldr	r3, [pc, #304]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d11c      	bne.n	80031fc <HAL_RCC_OscConfig+0x18c>
 80031c2:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x176>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e1ba      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4939      	ldr	r1, [pc, #228]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	e03a      	b.n	8003272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7fe ffa1 	bl	8002150 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003212:	f7fe ff9d 	bl	8002150 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e19b      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4927      	ldr	r1, [pc, #156]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003246:	4b26      	ldr	r3, [pc, #152]	; (80032e0 <HAL_RCC_OscConfig+0x270>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe ff80 	bl	8002150 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003254:	f7fe ff7c 	bl	8002150 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e17a      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d03a      	beq.n	80032f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d019      	beq.n	80032ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_RCC_OscConfig+0x274>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328c:	f7fe ff60 	bl	8002150 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003294:	f7fe ff5c 	bl	8002150 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e15a      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCC_OscConfig+0x26c>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032b2:	2001      	movs	r0, #1
 80032b4:	f000 fada 	bl	800386c <RCC_Delay>
 80032b8:	e01c      	b.n	80032f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_RCC_OscConfig+0x274>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c0:	f7fe ff46 	bl	8002150 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c6:	e00f      	b.n	80032e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fe ff42 	bl	8002150 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d908      	bls.n	80032e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e140      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
 80032e0:	42420000 	.word	0x42420000
 80032e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b9e      	ldr	r3, [pc, #632]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1e9      	bne.n	80032c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a6 	beq.w	800344e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003306:	4b97      	ldr	r3, [pc, #604]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10d      	bne.n	800332e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	4b94      	ldr	r3, [pc, #592]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4a93      	ldr	r2, [pc, #588]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	61d3      	str	r3, [r2, #28]
 800331e:	4b91      	ldr	r3, [pc, #580]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b8e      	ldr	r3, [pc, #568]	; (8003568 <HAL_RCC_OscConfig+0x4f8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a8a      	ldr	r2, [pc, #552]	; (8003568 <HAL_RCC_OscConfig+0x4f8>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe ff03 	bl	8002150 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe feff 	bl	8002150 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e0fd      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b81      	ldr	r3, [pc, #516]	; (8003568 <HAL_RCC_OscConfig+0x4f8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x312>
 8003374:	4b7b      	ldr	r3, [pc, #492]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	4a7a      	ldr	r2, [pc, #488]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6213      	str	r3, [r2, #32]
 8003380:	e02d      	b.n	80033de <HAL_RCC_OscConfig+0x36e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x334>
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	4a72      	ldr	r2, [pc, #456]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 800339c:	f023 0304 	bic.w	r3, r3, #4
 80033a0:	6213      	str	r3, [r2, #32]
 80033a2:	e01c      	b.n	80033de <HAL_RCC_OscConfig+0x36e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCC_OscConfig+0x356>
 80033ac:	4b6d      	ldr	r3, [pc, #436]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a6c      	ldr	r2, [pc, #432]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4a69      	ldr	r2, [pc, #420]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6213      	str	r3, [r2, #32]
 80033c4:	e00b      	b.n	80033de <HAL_RCC_OscConfig+0x36e>
 80033c6:	4b67      	ldr	r3, [pc, #412]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a66      	ldr	r2, [pc, #408]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	4b64      	ldr	r3, [pc, #400]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a63      	ldr	r2, [pc, #396]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d015      	beq.n	8003412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe feb3 	bl	8002150 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe feaf 	bl	8002150 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0ab      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	4b57      	ldr	r3, [pc, #348]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ee      	beq.n	80033ee <HAL_RCC_OscConfig+0x37e>
 8003410:	e014      	b.n	800343c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fe9d 	bl	8002150 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe fe99 	bl	8002150 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e095      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003430:	4b4c      	ldr	r3, [pc, #304]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ee      	bne.n	800341a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d105      	bne.n	800344e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b48      	ldr	r3, [pc, #288]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a47      	ldr	r2, [pc, #284]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8081 	beq.w	800355a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003458:	4b42      	ldr	r3, [pc, #264]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d061      	beq.n	8003528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d146      	bne.n	80034fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346c:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_OscConfig+0x4fc>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003472:	f7fe fe6d 	bl	8002150 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fe69 	bl	8002150 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e067      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d108      	bne.n	80034b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034a2:	4b30      	ldr	r3, [pc, #192]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	492d      	ldr	r1, [pc, #180]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a19      	ldr	r1, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	430b      	orrs	r3, r1
 80034c6:	4927      	ldr	r1, [pc, #156]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x4fc>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fe3d 	bl	8002150 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034da:	f7fe fe39 	bl	8002150 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e037      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ec:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x46a>
 80034f8:	e02f      	b.n	800355a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_RCC_OscConfig+0x4fc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fe26 	bl	8002150 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fe22 	bl	8002150 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e020      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x498>
 8003526:	e018      	b.n	800355a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e013      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	429a      	cmp	r2, r3
 8003546:	d106      	bne.n	8003556 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
 800356c:	42420060 	.word	0x42420060

08003570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0d0      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d910      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003592:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	4965      	ldr	r1, [pc, #404]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d040      	beq.n	8003690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d115      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e073      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06b      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4936      	ldr	r1, [pc, #216]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003660:	f7fe fd76 	bl	8002150 <HAL_GetTick>
 8003664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	e00a      	b.n	800367e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe fd72 	bl	8002150 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e053      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 020c 	and.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	429a      	cmp	r2, r3
 800368e:	d1eb      	bne.n	8003668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d210      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4922      	ldr	r1, [pc, #136]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4601      	mov	r1, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1c8>)
 8003710:	5cd3      	ldrb	r3, [r2, r3]
 8003712:	fa21 f303 	lsr.w	r3, r1, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1cc>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1d0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fcd4 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40022000 	.word	0x40022000
 8003734:	40021000 	.word	0x40021000
 8003738:	080049ac 	.word	0x080049ac
 800373c:	20000004 	.word	0x20000004
 8003740:	20000008 	.word	0x20000008

08003744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b490      	push	{r4, r7}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800374c:	1d3c      	adds	r4, r7, #4
 800374e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b04      	cmp	r3, #4
 800377c:	d002      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 800377e:	2b08      	cmp	r3, #8
 8003780:	d003      	beq.n	800378a <HAL_RCC_GetSysClockFreq+0x46>
 8003782:	e02d      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003786:	623b      	str	r3, [r7, #32]
      break;
 8003788:	e02d      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	0c9b      	lsrs	r3, r3, #18
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003796:	4413      	add	r3, r2
 8003798:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800379c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	0c5b      	lsrs	r3, r3, #17
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037b6:	4413      	add	r3, r2
 80037b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c2:	fb02 f203 	mul.w	r2, r2, r3
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	e004      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	623b      	str	r3, [r7, #32]
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037e2:	623b      	str	r3, [r7, #32]
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3728      	adds	r7, #40	; 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc90      	pop	{r4, r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	08004998 	.word	0x08004998
 80037f8:	080049a8 	.word	0x080049a8
 80037fc:	40021000 	.word	0x40021000
 8003800:	007a1200 	.word	0x007a1200
 8003804:	003d0900 	.word	0x003d0900

08003808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <HAL_RCC_GetHCLKFreq+0x10>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000004 	.word	0x20000004

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff2 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003824:	4601      	mov	r1, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4a03      	ldr	r2, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	080049bc 	.word	0x080049bc

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffde 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 800384c:	4601      	mov	r1, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0adb      	lsrs	r3, r3, #11
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4a03      	ldr	r2, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	080049bc 	.word	0x080049bc

0800386c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <RCC_Delay+0x34>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <RCC_Delay+0x38>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003888:	bf00      	nop
  }
  while (Delay --);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f9      	bne.n	8003888 <RCC_Delay+0x1c>
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000004 	.word	0x20000004
 80038a4:	10624dd3 	.word	0x10624dd3

080038a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e041      	b.n	800393e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe fac6 	bl	8001e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 faae 	bl	8003e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_TIM_Base_Start+0x88>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_TIM_Base_Start+0x48>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d009      	beq.n	8003990 <HAL_TIM_Base_Start+0x48>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <HAL_TIM_Base_Start+0x8c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_TIM_Base_Start+0x48>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_TIM_Base_Start+0x90>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d010      	beq.n	80039c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	e007      	b.n	80039c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800

080039dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e03a      	b.n	8003a6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <HAL_TIM_Base_Start_IT+0x98>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x58>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d009      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x58>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x58>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d111      	bne.n	8003a58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d010      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	e007      	b.n	8003a68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800

08003a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0202 	mvn.w	r2, #2
 8003aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9a4 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f997 	bl	8003dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9a6 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0204 	mvn.w	r2, #4
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f97a 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f96d 	bl	8003dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f97c 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0208 	mvn.w	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f950 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f943 	bl	8003dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f952 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2208      	movs	r2, #8
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f926 	bl	8003e10 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f919 	bl	8003dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f928 	bl	8003e22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd ff48 	bl	8001a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fa6b 	bl	8004106 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8ec 	bl	8003e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0220 	mvn.w	r2, #32
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa36 	bl	80040f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0a6      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0x166>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d067      	beq.n	8003db0 <HAL_TIM_ConfigClockSource+0x120>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d80b      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x6c>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d073      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d802      	bhi.n	8003cf2 <HAL_TIM_ConfigClockSource+0x62>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d06f      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cf0:	e078      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d06c      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
 8003cf6:	2b30      	cmp	r3, #48	; 0x30
 8003cf8:	d06a      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003cfa:	e073      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d00d      	beq.n	8003d1c <HAL_TIM_ConfigClockSource+0x8c>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d804      	bhi.n	8003d0e <HAL_TIM_ConfigClockSource+0x7e>
 8003d04:	2b50      	cmp	r3, #80	; 0x50
 8003d06:	d033      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xe0>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d041      	beq.n	8003d90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d0c:	e06a      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d066      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x152>
 8003d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d18:	d017      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d1a:	e063      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	6899      	ldr	r1, [r3, #8]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f000 f965 	bl	8003ffa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e04c      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 f94e 	bl	8003ffa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6c:	609a      	str	r2, [r3, #8]
      break;
 8003d6e:	e039      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f000 f8c5 	bl	8003f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2150      	movs	r1, #80	; 0x50
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f91c 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003d8e:	e029      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f000 f8e3 	bl	8003f68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2160      	movs	r1, #96	; 0x60
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f90c 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003dae:	e019      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f000 f8a5 	bl	8003f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2140      	movs	r1, #64	; 0x40
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f8fc 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003dce:	e009      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f000 f8f3 	bl	8003fc6 <TIM_ITRx_SetConfig>
        break;
 8003de0:	e000      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
	...

08003e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <TIM_Base_SetConfig+0xb8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_Base_SetConfig+0x30>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e66:	d007      	beq.n	8003e78 <TIM_Base_SetConfig+0x30>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <TIM_Base_SetConfig+0xbc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_Base_SetConfig+0x30>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <TIM_Base_SetConfig+0xc0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d108      	bne.n	8003e8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <TIM_Base_SetConfig+0xb8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_Base_SetConfig+0x62>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d007      	beq.n	8003eaa <TIM_Base_SetConfig+0x62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <TIM_Base_SetConfig+0xbc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_Base_SetConfig+0x62>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <TIM_Base_SetConfig+0xc0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d108      	bne.n	8003ebc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <TIM_Base_SetConfig+0xb8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	615a      	str	r2, [r3, #20]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000800 	.word	0x40000800

08003f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 030a 	bic.w	r3, r3, #10
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 0210 	bic.w	r2, r3, #16
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	031b      	lsls	r3, r3, #12
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f043 0307 	orr.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004014:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	021a      	lsls	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	431a      	orrs	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4313      	orrs	r3, r2
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e046      	b.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d009      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10c      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800

080040f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e03f      	b.n	80041aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fec8 	bl	8001ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa53 	bl	8004608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10d      	bne.n	8004206 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_UART_IRQHandler+0x52>
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f982 	bl	8004508 <UART_Receive_IT>
      return;
 8004204:	e0d1      	b.n	80043aa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80b0 	beq.w	800436e <HAL_UART_IRQHandler+0x1ba>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <HAL_UART_IRQHandler+0x70>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80a5 	beq.w	800436e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_UART_IRQHandler+0x90>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_UART_IRQHandler+0xb0>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	f043 0202 	orr.w	r2, r3, #2
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_UART_IRQHandler+0xd0>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	f043 0204 	orr.w	r2, r3, #4
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00f      	beq.n	80042ae <HAL_UART_IRQHandler+0xfa>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_UART_IRQHandler+0xee>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	f043 0208 	orr.w	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d078      	beq.n	80043a8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_UART_IRQHandler+0x11c>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f91c 	bl	8004508 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf14      	ite	ne
 80042de:	2301      	movne	r3, #1
 80042e0:	2300      	moveq	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_UART_IRQHandler+0x144>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d031      	beq.n	800435c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f86d 	bl	80043d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d023      	beq.n	8004354 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <HAL_UART_IRQHandler+0x1fc>)
 800432a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe f847 	bl	80023c4 <HAL_DMA_Abort_IT>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004346:	4610      	mov	r0, r2
 8004348:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434a:	e00e      	b.n	800436a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f83a 	bl	80043c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	e00a      	b.n	800436a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f836 	bl	80043c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435a:	e006      	b.n	800436a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f832 	bl	80043c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004368:	e01e      	b.n	80043a8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436a:	bf00      	nop
    return;
 800436c:	e01c      	b.n	80043a8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_UART_IRQHandler+0x1d6>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f859 	bl	800443a <UART_Transmit_IT>
    return;
 8004388:	e00f      	b.n	80043aa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_UART_IRQHandler+0x1f6>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f89a 	bl	80044d8 <UART_EndTransmit_IT>
    return;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_UART_IRQHandler+0x1f6>
    return;
 80043a8:	bf00      	nop
  }
}
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	08004413 	.word	0x08004413

080043b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff ffca 	bl	80043c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b21      	cmp	r3, #33	; 0x21
 800444c:	d13e      	bne.n	80044cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	d114      	bne.n	8004482 <UART_Transmit_IT+0x48>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d110      	bne.n	8004482 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004474:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]
 8004480:	e008      	b.n	8004494 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6211      	str	r1, [r2, #32]
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29b      	uxth	r3, r3
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4619      	mov	r1, r3
 80044a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10f      	bne.n	80044c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff ff5b 	bl	80043b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b22      	cmp	r3, #34	; 0x22
 800451a:	d170      	bne.n	80045fe <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004524:	d117      	bne.n	8004556 <UART_Receive_IT+0x4e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d113      	bne.n	8004556 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	b29b      	uxth	r3, r3
 8004540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004544:	b29a      	uxth	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28
 8004554:	e026      	b.n	80045a4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d007      	beq.n	800457a <UART_Receive_IT+0x72>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10a      	bne.n	8004588 <UART_Receive_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	e008      	b.n	800459a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4619      	mov	r1, r3
 80045b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d120      	bne.n	80045fa <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0220 	bic.w	r2, r2, #32
 80045c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fd fa45 	bl	8001a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e002      	b.n	8004600 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e000      	b.n	8004600 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004642:	f023 030c 	bic.w	r3, r3, #12
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	430b      	orrs	r3, r1
 800464e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a2c      	ldr	r2, [pc, #176]	; (800471c <UART_SetConfig+0x114>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7ff f8e8 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	e002      	b.n	800467e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7ff f8d0 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 800467c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	0119      	lsls	r1, r3, #4
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	009a      	lsls	r2, r3, #2
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <UART_SetConfig+0x118>)
 80046b6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2064      	movs	r0, #100	; 0x64
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	; 0x32
 80046c8:	4a15      	ldr	r2, [pc, #84]	; (8004720 <UART_SetConfig+0x118>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d4:	4419      	add	r1, r3
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009a      	lsls	r2, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <UART_SetConfig+0x118>)
 80046ee:	fba3 0302 	umull	r0, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2064      	movs	r0, #100	; 0x64
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a07      	ldr	r2, [pc, #28]	; (8004720 <UART_SetConfig+0x118>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	440a      	add	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40013800 	.word	0x40013800
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <__errno>:
 8004724:	4b01      	ldr	r3, [pc, #4]	; (800472c <__errno+0x8>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000010 	.word	0x20000010

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	2500      	movs	r5, #0
 8004734:	4e0c      	ldr	r6, [pc, #48]	; (8004768 <__libc_init_array+0x38>)
 8004736:	4c0d      	ldr	r4, [pc, #52]	; (800476c <__libc_init_array+0x3c>)
 8004738:	1ba4      	subs	r4, r4, r6
 800473a:	10a4      	asrs	r4, r4, #2
 800473c:	42a5      	cmp	r5, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	f000 f8ea 	bl	8004918 <_init>
 8004744:	2500      	movs	r5, #0
 8004746:	4e0a      	ldr	r6, [pc, #40]	; (8004770 <__libc_init_array+0x40>)
 8004748:	4c0a      	ldr	r4, [pc, #40]	; (8004774 <__libc_init_array+0x44>)
 800474a:	1ba4      	subs	r4, r4, r6
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	42a5      	cmp	r5, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004758:	4798      	blx	r3
 800475a:	3501      	adds	r5, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004762:	4798      	blx	r3
 8004764:	3501      	adds	r5, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	080049c4 	.word	0x080049c4
 800476c:	080049c4 	.word	0x080049c4
 8004770:	080049c4 	.word	0x080049c4
 8004774:	080049c8 	.word	0x080049c8

08004778 <malloc>:
 8004778:	4b02      	ldr	r3, [pc, #8]	; (8004784 <malloc+0xc>)
 800477a:	4601      	mov	r1, r0
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f000 b85f 	b.w	8004840 <_malloc_r>
 8004782:	bf00      	nop
 8004784:	20000010 	.word	0x20000010

08004788 <free>:
 8004788:	4b02      	ldr	r3, [pc, #8]	; (8004794 <free+0xc>)
 800478a:	4601      	mov	r1, r0
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	f000 b80b 	b.w	80047a8 <_free_r>
 8004792:	bf00      	nop
 8004794:	20000010 	.word	0x20000010

08004798 <memset>:
 8004798:	4603      	mov	r3, r0
 800479a:	4402      	add	r2, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <memset+0xa>
 80047a0:	4770      	bx	lr
 80047a2:	f803 1b01 	strb.w	r1, [r3], #1
 80047a6:	e7f9      	b.n	800479c <memset+0x4>

080047a8 <_free_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4605      	mov	r5, r0
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d043      	beq.n	8004838 <_free_r+0x90>
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f0c      	subs	r4, r1, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfb8      	it	lt
 80047ba:	18e4      	addlt	r4, r4, r3
 80047bc:	f000 f8aa 	bl	8004914 <__malloc_lock>
 80047c0:	4a1e      	ldr	r2, [pc, #120]	; (800483c <_free_r+0x94>)
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	4610      	mov	r0, r2
 80047c6:	b933      	cbnz	r3, 80047d6 <_free_r+0x2e>
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	6014      	str	r4, [r2, #0]
 80047cc:	4628      	mov	r0, r5
 80047ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d2:	f000 b8a0 	b.w	8004916 <__malloc_unlock>
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	d90b      	bls.n	80047f2 <_free_r+0x4a>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	1862      	adds	r2, r4, r1
 80047de:	4293      	cmp	r3, r2
 80047e0:	bf01      	itttt	eq
 80047e2:	681a      	ldreq	r2, [r3, #0]
 80047e4:	685b      	ldreq	r3, [r3, #4]
 80047e6:	1852      	addeq	r2, r2, r1
 80047e8:	6022      	streq	r2, [r4, #0]
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	6004      	str	r4, [r0, #0]
 80047ee:	e7ed      	b.n	80047cc <_free_r+0x24>
 80047f0:	4613      	mov	r3, r2
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	b10a      	cbz	r2, 80047fa <_free_r+0x52>
 80047f6:	42a2      	cmp	r2, r4
 80047f8:	d9fa      	bls.n	80047f0 <_free_r+0x48>
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	1858      	adds	r0, r3, r1
 80047fe:	42a0      	cmp	r0, r4
 8004800:	d10b      	bne.n	800481a <_free_r+0x72>
 8004802:	6820      	ldr	r0, [r4, #0]
 8004804:	4401      	add	r1, r0
 8004806:	1858      	adds	r0, r3, r1
 8004808:	4282      	cmp	r2, r0
 800480a:	6019      	str	r1, [r3, #0]
 800480c:	d1de      	bne.n	80047cc <_free_r+0x24>
 800480e:	6810      	ldr	r0, [r2, #0]
 8004810:	6852      	ldr	r2, [r2, #4]
 8004812:	4401      	add	r1, r0
 8004814:	6019      	str	r1, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	e7d8      	b.n	80047cc <_free_r+0x24>
 800481a:	d902      	bls.n	8004822 <_free_r+0x7a>
 800481c:	230c      	movs	r3, #12
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	e7d4      	b.n	80047cc <_free_r+0x24>
 8004822:	6820      	ldr	r0, [r4, #0]
 8004824:	1821      	adds	r1, r4, r0
 8004826:	428a      	cmp	r2, r1
 8004828:	bf01      	itttt	eq
 800482a:	6811      	ldreq	r1, [r2, #0]
 800482c:	6852      	ldreq	r2, [r2, #4]
 800482e:	1809      	addeq	r1, r1, r0
 8004830:	6021      	streq	r1, [r4, #0]
 8004832:	6062      	str	r2, [r4, #4]
 8004834:	605c      	str	r4, [r3, #4]
 8004836:	e7c9      	b.n	80047cc <_free_r+0x24>
 8004838:	bd38      	pop	{r3, r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	200000ac 	.word	0x200000ac

08004840 <_malloc_r>:
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	1ccd      	adds	r5, r1, #3
 8004844:	f025 0503 	bic.w	r5, r5, #3
 8004848:	3508      	adds	r5, #8
 800484a:	2d0c      	cmp	r5, #12
 800484c:	bf38      	it	cc
 800484e:	250c      	movcc	r5, #12
 8004850:	2d00      	cmp	r5, #0
 8004852:	4606      	mov	r6, r0
 8004854:	db01      	blt.n	800485a <_malloc_r+0x1a>
 8004856:	42a9      	cmp	r1, r5
 8004858:	d903      	bls.n	8004862 <_malloc_r+0x22>
 800485a:	230c      	movs	r3, #12
 800485c:	6033      	str	r3, [r6, #0]
 800485e:	2000      	movs	r0, #0
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	f000 f857 	bl	8004914 <__malloc_lock>
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <_malloc_r+0xac>)
 8004868:	6814      	ldr	r4, [r2, #0]
 800486a:	4621      	mov	r1, r4
 800486c:	b991      	cbnz	r1, 8004894 <_malloc_r+0x54>
 800486e:	4c20      	ldr	r4, [pc, #128]	; (80048f0 <_malloc_r+0xb0>)
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	b91b      	cbnz	r3, 800487c <_malloc_r+0x3c>
 8004874:	4630      	mov	r0, r6
 8004876:	f000 f83d 	bl	80048f4 <_sbrk_r>
 800487a:	6020      	str	r0, [r4, #0]
 800487c:	4629      	mov	r1, r5
 800487e:	4630      	mov	r0, r6
 8004880:	f000 f838 	bl	80048f4 <_sbrk_r>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d124      	bne.n	80048d2 <_malloc_r+0x92>
 8004888:	230c      	movs	r3, #12
 800488a:	4630      	mov	r0, r6
 800488c:	6033      	str	r3, [r6, #0]
 800488e:	f000 f842 	bl	8004916 <__malloc_unlock>
 8004892:	e7e4      	b.n	800485e <_malloc_r+0x1e>
 8004894:	680b      	ldr	r3, [r1, #0]
 8004896:	1b5b      	subs	r3, r3, r5
 8004898:	d418      	bmi.n	80048cc <_malloc_r+0x8c>
 800489a:	2b0b      	cmp	r3, #11
 800489c:	d90f      	bls.n	80048be <_malloc_r+0x7e>
 800489e:	600b      	str	r3, [r1, #0]
 80048a0:	18cc      	adds	r4, r1, r3
 80048a2:	50cd      	str	r5, [r1, r3]
 80048a4:	4630      	mov	r0, r6
 80048a6:	f000 f836 	bl	8004916 <__malloc_unlock>
 80048aa:	f104 000b 	add.w	r0, r4, #11
 80048ae:	1d23      	adds	r3, r4, #4
 80048b0:	f020 0007 	bic.w	r0, r0, #7
 80048b4:	1ac3      	subs	r3, r0, r3
 80048b6:	d0d3      	beq.n	8004860 <_malloc_r+0x20>
 80048b8:	425a      	negs	r2, r3
 80048ba:	50e2      	str	r2, [r4, r3]
 80048bc:	e7d0      	b.n	8004860 <_malloc_r+0x20>
 80048be:	684b      	ldr	r3, [r1, #4]
 80048c0:	428c      	cmp	r4, r1
 80048c2:	bf16      	itet	ne
 80048c4:	6063      	strne	r3, [r4, #4]
 80048c6:	6013      	streq	r3, [r2, #0]
 80048c8:	460c      	movne	r4, r1
 80048ca:	e7eb      	b.n	80048a4 <_malloc_r+0x64>
 80048cc:	460c      	mov	r4, r1
 80048ce:	6849      	ldr	r1, [r1, #4]
 80048d0:	e7cc      	b.n	800486c <_malloc_r+0x2c>
 80048d2:	1cc4      	adds	r4, r0, #3
 80048d4:	f024 0403 	bic.w	r4, r4, #3
 80048d8:	42a0      	cmp	r0, r4
 80048da:	d005      	beq.n	80048e8 <_malloc_r+0xa8>
 80048dc:	1a21      	subs	r1, r4, r0
 80048de:	4630      	mov	r0, r6
 80048e0:	f000 f808 	bl	80048f4 <_sbrk_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	d0cf      	beq.n	8004888 <_malloc_r+0x48>
 80048e8:	6025      	str	r5, [r4, #0]
 80048ea:	e7db      	b.n	80048a4 <_malloc_r+0x64>
 80048ec:	200000ac 	.word	0x200000ac
 80048f0:	200000b0 	.word	0x200000b0

080048f4 <_sbrk_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	2300      	movs	r3, #0
 80048f8:	4c05      	ldr	r4, [pc, #20]	; (8004910 <_sbrk_r+0x1c>)
 80048fa:	4605      	mov	r5, r0
 80048fc:	4608      	mov	r0, r1
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	f7fd fb6c 	bl	8001fdc <_sbrk>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_sbrk_r+0x1a>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	b103      	cbz	r3, 800490e <_sbrk_r+0x1a>
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20000200 	.word	0x20000200

08004914 <__malloc_lock>:
 8004914:	4770      	bx	lr

08004916 <__malloc_unlock>:
 8004916:	4770      	bx	lr

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
